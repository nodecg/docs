"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[639],{377:function(e,n,i){i.r(n),i.d(n,{assets:function(){return l},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return t},metadata:function(){return s},toc:function(){return r}});var o=i(5893),a=i(1151);const t={id:"making-dialogs",title:"Making Dashboard Dialogs",sidebar_label:"Making Dashboard Dialogs"},d=void 0,s={id:"making-dialogs",title:"Making Dashboard Dialogs",description:"Starting with NodeCG 0.7, all dashboard panels are iframes. This was done to provide full code and style encapsulation,",source:"@site/docs/making-dialogs.md",sourceDirName:".",slug:"/making-dialogs",permalink:"/ja/docs/making-dialogs",draft:!1,unlisted:!1,editUrl:"https://github.com/nodecg/docs/edit/main/docs/making-dialogs.md",tags:[],version:"current",lastUpdatedBy:"Keiichiro Amemiya",lastUpdatedAt:1736076603,formattedLastUpdatedAt:"2025\u5e741\u67085\u65e5",frontMatter:{id:"making-dialogs",title:"Making Dashboard Dialogs",sidebar_label:"Making Dashboard Dialogs"},sidebar:"mainSidebar",previous:{title:"Replicant Validation",permalink:"/ja/docs/replicant-schemas"},next:{title:"Portable NodeCG",permalink:"/ja/docs/portable-nodecg"}},l={},r=[{value:"Opening dialogs",id:"opening",level:2},{value:"Closing dialogs",id:"closing",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Starting with NodeCG 0.7, all dashboard panels are iframes. This was done to provide full code and style encapsulation,\neliminating the need for bundle authors to worry about what they are putting into the global scope with their panel.\nHowever, because every panel is an iframe, it is not possible for a panel to draw anything outside of its bounding box.\nThis limitation made having dialogs and modals impossible, among other things. To address this, we created a dedicated\nsystem for displaying dialogs."}),"\n",(0,o.jsxs)(n.p,{children:["A dialog is defined the same as any other dashboard panel would be in ",(0,o.jsx)(n.a,{href:"/docs/manifest",children:"package.json"}),", with an\nadditional ",(0,o.jsx)(n.code,{children:"dialog: true"})," property."]}),"\n",(0,o.jsx)(n.h2,{id:"opening",children:"Opening dialogs"}),"\n",(0,o.jsxs)(n.p,{children:["To open a dialog, add a ",(0,o.jsx)(n.code,{children:"nodecg-dialog"})," attribute to any clickable element on one of your panels. For example, this\n",(0,o.jsx)(n.a,{href:"https://elements.polymer-project.org/elements/paper-button",children:(0,o.jsx)(n.code,{children:"<paper-button>"})})," element will open the ",(0,o.jsx)(n.code,{children:"edit-total"})," dialog when clicked:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<paper-button id="edit" class="nodecg-configure" nodecg-dialog="edit-total">Edit...</paper-button>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["When a dialog is opened, NodeCG will emit a ",(0,o.jsx)(n.code,{children:"dialog-opened"})," event on your dialog's ",(0,o.jsx)(n.code,{children:"document"}),". For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:"\x3c!-- bundles/my-bundle/dashboard/my-dialog.html --\x3e\n<script>\n    document.addEventListener('dialog-opened', function() {\n        // The user opened the dialog.\n    });\n<\/script>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"closing",children:"Closing dialogs"}),"\n",(0,o.jsxs)(n.p,{children:["By default, a dialog can only be closed by clicking outside of it. Optional confirmation and dismissal buttons can be\nadded via ",(0,o.jsx)(n.code,{children:"package.json"}),". See the ",(0,o.jsx)(n.a,{href:"/docs/manifest",children:"package.json tutorial"})," for information on the ",(0,o.jsx)(n.code,{children:"dialogButtons"}),"\nproperty."]}),"\n",(0,o.jsxs)(n.p,{children:["When a ",(0,o.jsx)(n.code,{children:"confirm"})," or ",(0,o.jsx)(n.code,{children:"dismiss"})," button is pressed, NodeCG will emit a ",(0,o.jsx)(n.code,{children:"dialog-confirmed"})," or ",(0,o.jsx)(n.code,{children:"dialog-dismissed"})," event\non your dialog's ",(0,o.jsx)(n.code,{children:"document"}),". For example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:"\x3c!-- bundles/my-bundle/dashboard/my-dialog.html --\x3e\n<script>\n    document.addEventListener('dialog-confirmed', function() {\n        // The user pressed the confirm button.\n    });\n    \n    document.addEventListener('dialog-dismissed', function() {\n        // The user pressed the dismiss button.\n    });\n<\/script>\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:function(e,n,i){i.d(n,{Z:function(){return s},a:function(){return d}});var o=i(7294);const a={},t=o.createContext(a);function d(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);