{"searchDocs":[{"title":"New Docs!","type":0,"sectionRef":"#","url":"/blog/2020/02/26/New-Docs","content":"","keywords":"","version":null},{"title":"Thanks to​","type":1,"pageTitle":"New Docs!","url":"/blog/2020/02/26/New-Docs#thanks","content":" Everyone on the NodeCG discord for testingEwan LyonLange  for making this update happen! ","version":null,"tagName":"h2"},{"title":"v1.6.0","type":0,"sectionRef":"#","url":"/blog/2020/02/25/v1.6.0","content":"","keywords":"","version":null},{"title":"New​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#new","content":" Docs now get automatically built (old jsdocs)Flexible mountsExpose NodeCG routerp5.js Tutorial  ","version":null,"tagName":"h2"},{"title":"Update​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#update","content":" Docket now on Node 10  ","version":null,"tagName":"h2"},{"title":"Fix​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#fix","content":" Check if bundle package.json has versionTypo in replicants description (objcts → objects)Clone replicant default value  ","version":null,"tagName":"h2"},{"title":"Thanks to​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#thanks","content":" SeldszarDan-ShieldsVodBoxEwan LyonHoishinLange  for making this update happen!  Version comparison here ","version":null,"tagName":"h2"},{"title":"NodeCG v2.1.0","type":0,"sectionRef":"#","url":"/blog/2023/03/26/v2.1.0","content":"","keywords":"","version":null},{"title":"Features​","type":1,"pageTitle":"NodeCG v2.1.0","url":"/blog/2023/03/26/v2.1.0#features","content":" Smaller docker image #631  ","version":null,"tagName":"h2"},{"title":"Bug fixes​","type":1,"pageTitle":"NodeCG v2.1.0","url":"/blog/2023/03/26/v2.1.0#bug-fixes","content":" v2.0.1 Remove package-lock.json from dependency files #620Fix docker file #617 v2.0.2 Include templates in server build output #625Make node-fetch-commonjs a production dependency #623 v2.0.3 Make @sentry/browser, @sentry/node, socket.io-client and tslib production dependencies #627 v2.0.4 Fix authenticated URLs #629 v2.1.0 Allow socket authentication with a token #635  ","version":null,"tagName":"h2"},{"title":"Thanks to​","type":1,"pageTitle":"NodeCG v2.1.0","url":"/blog/2023/03/26/v2.1.0#thanks-to","content":" LangeKeiichiro Amemiya ","version":null,"tagName":"h2"},{"title":"NodeCG v2!","type":0,"sectionRef":"#","url":"/blog/2023/03/23/v2.0.0","content":"","keywords":"","version":null},{"title":"What's changed?​","type":1,"pageTitle":"NodeCG v2!","url":"/blog/2023/03/23/v2.0.0#changed","content":" For bundle developers? Nothing really... but in a good way. This means that bundles can be migrated over to v2 with little to no changes required. This update is more about making it easier for NodeCG core developers to develop new features that you can use in the future.  Please refer to the migration docs for more information and if you need any help please don't hesitate to reach out to the Discord!  ","version":null,"tagName":"h2"},{"title":"TypeScript rewrite​","type":1,"pageTitle":"NodeCG v2!","url":"/blog/2023/03/23/v2.0.0#typescript","content":" The biggest and most important change for NodeCG is that it is now written in TypeScript. This will greatly benefit developers of NodeCG core and also allow bundle developers to more easily use types through the @nodecg/types package.  ","version":null,"tagName":"h2"},{"title":"NodeCG repository now contains only source code​","type":1,"pageTitle":"NodeCG v2!","url":"/blog/2023/03/23/v2.0.0#build","content":" NodeCG used to contain its build outputs in the repository. This was helpful at the time, since all that was needed was to install the dependencies and you were off to the races. However, in v2 this has changed. If you use nodecg-cli, make sure to download the latest version in order for v2 to install correctly (npm i -g nodecg-cli@latest). Developers who would clone manually must now install all dependencies (npm i) and run npm run build themselves.  ","version":null,"tagName":"h2"},{"title":"Running into issues?​","type":1,"pageTitle":"NodeCG v2!","url":"/blog/2023/03/23/v2.0.0#issues","content":" If you are having any issues at all with version 2, please post an issue on our GitHub or reach out to our Discord.  ","version":null,"tagName":"h2"},{"title":"Future​","type":1,"pageTitle":"NodeCG v2!","url":"/blog/2023/03/23/v2.0.0#future","content":" NodeCG waiting to be rewritten in TypeScript was a major blocker for new developments to the project. It was also a massive undertaking, which is why it took so long to develop.  Now that it's written in TypeScript we can start developing new features that have been long requested such as:  Per-user permissionsReworked project structureBetter bundle managementInternationalizationUpdating the dashboard UI to React (will not affect bundles, just the internal code of the dashboard. You will never be forced to write your bundles in any specific framework.)and more!  ","version":null,"tagName":"h2"},{"title":"Thanks to​","type":1,"pageTitle":"NodeCG v2!","url":"/blog/2023/03/23/v2.0.0#thanks","content":" Lange for lead development of v2Keiichiro Amemiya for assisting in direction and development of v2zoton2 for testing &amp; feedbackEwan Lyon for testing &amp; feedbackDaniel for testing &amp; feedbackDan Shields for fixes &amp; feedbackJon Egeland for major contributions to the architecture of the codeDom Hynes for fixes &amp; feedbackThe NodeCG community for their patience and support during this time ","version":null,"tagName":"h2"},{"title":"getDialog","type":0,"sectionRef":"#","url":"/docs/classes/getDialog","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"getDialog","url":"/docs/classes/getDialog#parameters","content":" Name\tType\tAttributes\tDefault\tDescriptionname\tstring The desired dialog's name. bundle\tstring\t&lt;optional&gt;\tCurrent bundle\tThe bundle from which to select the dialog. ","version":"Next","tagName":"h3"},{"title":"Assets","type":0,"sectionRef":"#","url":"/docs/assets","content":"Assets The Asset system enables bundle authors to provide a means for end users to upload custom files from the dashboard for use in the bundle. To enable the Asset system in a bundle, add code like the following to your bundle's package.json: { &quot;name&quot;: &quot;test-bundle&quot;, &quot;nodecg&quot;: { &quot;assetCategories&quot;: [ { &quot;name&quot;: &quot;thumbnails&quot;, &quot;title&quot;: &quot;Thumbnails&quot;, &quot;allowedTypes&quot;: [ &quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot; ] }, { &quot;name&quot;: &quot;boxart&quot;, &quot;title&quot;: &quot;Boxart&quot;, &quot;allowedTypes&quot;: [ &quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot; ] } ] } } NodeCG will automatically create a Replicant for each assetCategory in a bundle. To access these asset Replicants, declare them as you would any other Replicant in your bundle. For example: const thumbnails = nodecg.Replicant('assets:thumbnails'); const boxart = nodecg.Replicant('assets:boxart'); These Replicants are arrays. Each item in these arrays describes one of the uploaded files: { &quot;base&quot;: &quot;square.png&quot;, &quot;namespace&quot;: &quot;test-bundle&quot;, &quot;category&quot;: &quot;thumbnails&quot;, &quot;ext&quot;: &quot;.png&quot;, &quot;name&quot;: &quot;square&quot;, &quot;sum&quot;: &quot;3f5828ff83eb099fe11a938f25e57afe8745efdc&quot;, &quot;url&quot;: &quot;/assets/test-bundle/thumbnails/square.png&quot; } ","keywords":"","version":"Next"},{"title":"Bundle Configuration","type":0,"sectionRef":"#","url":"/docs/bundle-configuration","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"Bundle Configuration","url":"/docs/bundle-configuration#example","content":" Say we have a bundle named test-bundle. If we create./cfg/test-bundle.js with the following contents:  module.exports = { myData: &quot;hello&quot; }   ... that data can be accessed via bundleConfig:  console.log(nodecg.bundleConfig.myData); // prints &quot;hello&quot;   ","version":"Next","tagName":"h2"},{"title":"JSON Schema​","type":1,"pageTitle":"Bundle Configuration","url":"/docs/bundle-configuration#json-schema","content":" If your bundle has a configschema.json file in its root, NodeCG will validate the config file (if any) for your bundle against this JSON Schema, and will throw errors on startup if the config file fails to pass validation. This is often the most efficient way to enforce a specific structure for your bundle's config.  See Understanding JSON Schemafor more information on what a JSON Schema is and how to use one. ","version":"Next","tagName":"h2"},{"title":"getDialogDocument","type":0,"sectionRef":"#","url":"/docs/classes/getDialogDocument","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"getDialogDocument","url":"/docs/classes/getDialogDocument#parameters","content":" Name\tType\tAttributes\tDefault\tDescriptionname\tstring The desired dialog's name. bundle\tstring\t&lt;optional&gt;\tCurrent bundle\tThe bundle from which to select the dialog. ","version":"Next","tagName":"h3"},{"title":"findCue","type":0,"sectionRef":"#","url":"/docs/classes/findCue","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"findCue","url":"/docs/classes/findCue#parameters","content":" Name\tType\tDescriptioncueName\tString\tName of the sound cue ","version":"Next","tagName":"h3"},{"title":"getSocketIOServer","type":0,"sectionRef":"#","url":"/docs/classes/getSocketIOServer","content":"getSocketIOServer Extension Only This can only be used in code which runs on the server. getSocketIOServer() Gets the server Socket.IO context.","keywords":"","version":"Next"},{"title":"listenFor","type":0,"sectionRef":"#","url":"/docs/classes/listenFor","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"listenFor","url":"/docs/classes/listenFor#parameters","content":" Name\tType\tAttributes\tDefault\tDescriptionmessageName\tstring The name of the message. bundleName\tstring\t&lt;optional&gt;\tCurrent bundle\tThe bundle namespace to in which to listen for this message. handlerFunc\tfunction The callback fired when this message is received. ","version":"Next","tagName":"h3"},{"title":"log","type":0,"sectionRef":"#","url":"/docs/classes/log","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"log","url":"/docs/classes/log#example","content":" nodecg.log.trace('trace level logging'); nodecg.log.debug('debug level logging'); nodecg.log.info('info level logging'); nodecg.log.warn('warn level logging'); nodecg.log.error('error level logging');  ","version":"Next","tagName":"h3"},{"title":"mount","type":0,"sectionRef":"#","url":"/docs/classes/mount","content":"mount Extension Only This can only be used in code which runs on the server. mount() Mounts express middleware to the main server express app. See the express docs for usage. This is generally used in tandem Router. See Custom Routes for a full guide.","keywords":"","version":"Next"},{"title":"playSound","type":0,"sectionRef":"#","url":"/docs/classes/playSound","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"playSound","url":"/docs/classes/playSound#parameters","content":" Name\tType\tAttributes\tDescriptioncueName\tString Sound cue's name opts\tObject\t&lt;optional&gt;\tOptions for the sound cue  Opts​  Name\tType\tAttributes\tDefault\tDescriptionupdateVolume\tboolean\t&lt;optional&gt;\ttrue\tWhether or not to let NodeCG automatically update this instance's volume when the user changes it on the dashboard. ","version":"Next","tagName":"h3"},{"title":"readReplicant","type":0,"sectionRef":"#","url":"/docs/classes/readReplicant","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"readReplicant","url":"/docs/classes/readReplicant#parameters","content":" Name\tType\tAttributes\tDefault\tDescriptionname\tstring The name of the replicant. bundle\tstring\t&lt;optional&gt;\tCurrent bundle\tThe bundle namespace to in which to look for this replicant. cb\tfunction Browser only The callback that handles the server's response which contains the value.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"readReplicant","url":"/docs/classes/readReplicant#example","content":" From an extension:  // Extensions have immediate access to the database of Replicants. // For this reason, they can use readReplicant synchronously, without a callback. module.exports = function(nodecg) { const myVal = nodecg.readReplicant('myVar', 'some-bundle'); };   From a graphic or dashboard panel:  // Graphics and dashboard panels must query the server to retrieve the value, // and therefore must provide a callback. nodecg.readReplicant('myRep', 'some-bundle', value =&gt; { // I can use 'value' now! console.log('myRep has the value ' + value + '!'); });  ","version":"Next","tagName":"h3"},{"title":"Router","type":0,"sectionRef":"#","url":"/docs/classes/router","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"Router","url":"/docs/classes/router#example","content":" Defining a simple GET route:  module.exports = function(nodecg) { const app = nodecg.Router(); app.get('/my-bundle/example', (req, res) =&gt; { res.send('custom route confirmed'); }); nodecg.mount(app); }  ","version":"Next","tagName":"h3"},{"title":"sendMessageToBundle","type":0,"sectionRef":"#","url":"/docs/classes/sendMessageToBundle","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"sendMessageToBundle","url":"/docs/classes/sendMessageToBundle#returns","content":" Browser Only This can only be used in code which runs in Dashboards and Graphics.  A Promise that is rejected if the first argument provided to the acknowledgement is an Error, otherwise it is resolved with the remaining arguments provided to the acknowledgement. But, if a callback was provided, this return value will be undefined, and there will be no Promise.  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"sendMessageToBundle","url":"/docs/classes/sendMessageToBundle#parameters","content":" Name\tType\tAttributes\tDescriptionname\tstring The name of the message. bundleName\tstring The name of the target bundle. data\tmixed\t&lt;optional&gt;\tThe data to send. cb\tfunction\t&lt;optional&gt;\tBrowser only The error-first callback to handle the server's acknowledgement message, if any. ","version":"Next","tagName":"h3"},{"title":"sendMessage","type":0,"sectionRef":"#","url":"/docs/classes/sendMessage","content":"","keywords":"","version":"Next"},{"title":"Returns​","type":1,"pageTitle":"sendMessage","url":"/docs/classes/sendMessage#returns","content":" Browser Only This can only be used in code which runs in Dashboards and Graphics.  A Promise that is rejected if the first argument provided to the acknowledgement is an Error, otherwise it is resolved with the remaining arguments provided to the acknowledgement.  ","version":"Next","tagName":"h3"},{"title":"Parameters​","type":1,"pageTitle":"sendMessage","url":"/docs/classes/sendMessage#parameters","content":" Name\tType\tAttributes\tDescriptionname\tstring The name of the message. data\tmixed\t&lt;optional&gt;\tThe data to send. cb\tfunction\t&lt;optional&gt;\tBrowser only The error-first callback to handle the server's acknowledgement message, if any.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"sendMessage","url":"/docs/classes/sendMessage#example","content":" Sending a normal message:  nodecg.sendMessage('printMessage', 'dope.');   Sending a message and replying with an acknowledgement:  bundles/my-bundle/extension.js module.exports = function(nodecg) { nodecg.listenFor('multiplyByTwo', (value, ack) =&gt; { if (value === 4) { ack(new Error('I don\\'t like multiplying the number 4!')); return; } // Acknowledgements should always be error-first callbacks. // If you do not wish to send an error, use a falsey value // like &quot;null&quot; instead. if (ack &amp;&amp; !ack.handled) { ack(null, value * 2); } }); }   bundles/my-bundle/graphics/script.js /* Both of these examples are functionally identical. */ // Promise acknowledgement nodecg.sendMessage('multiplyByTwo', 2) .then(result =&gt; { console.log(result); // Will eventually print '4' }).catch(error =&gt; { console.error(error); }); // Error-first callback acknowledgement nodecg.sendMessage('multiplyByTwo', 2, (error, result) =&gt; { if (error) { console.error(error); return; } console.log(result); // Will eventually print '4' });  ","version":"Next","tagName":"h3"},{"title":"Replicant","type":0,"sectionRef":"#","url":"/docs/classes/replicant","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"Replicant","url":"/docs/classes/replicant#parameters","content":" Name\tType\tAttributes\tDescriptionname\tstring The name of the replicant. namespace\tstring\t&lt;optional&gt;\tThe namespace to in which to look for this replicant. Defaults to the name of the current bundle. opts\tobject\t&lt;optional&gt;\tThe options for this replicant.  Opts​  Name\tType\tAttributes\tDefault\tDescriptiondefaultValue\tany\t&lt;optional&gt; The default value to instantiate this Replicant with. The default value is only applied if this Replicant has not previously been declared and if it has no persisted value. persistent\tboolean\t&lt;optional&gt;\ttrue\tWhether to persist the Replicant's value to disk on every change. Persisted values are re-loaded on startup. persistenceInterval\tnumber\t&lt;optional&gt;\t100\tInterval between each persistence, in milliseconds. schemaPath\tstring\t&lt;optional&gt; The filepath at which to look for a JSON Schema for this Replicant. Defaults to nodecg/bundles/${bundleName}/schemas/${replicantName}.json. Please note that this default path will be URIEncoded to ensure that it results in a valid filename.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Replicant","url":"/docs/classes/replicant#example","content":" const myRep = nodecg.Replicant('myRep', { defaultValue: 123 }); myRep.on('change', (newValue, oldValue) =&gt; { console.log(`myRep changed from ${oldValue} to ${newValue}`); }); myRep.value = 'Hello!'; myRep.value = { objects: 'work too!' }; myRep.value = { objects: { can: { be: 'nested!' } } }; myRep.value = ['Even', 'arrays', 'work!'];  ","version":"Next","tagName":"h3"},{"title":"NodeCG","type":0,"sectionRef":"#","url":"/docs/classes/nodecg","content":"","keywords":"","version":"Next"},{"title":"Members​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#members","content":" ","version":"Next","tagName":"h2"},{"title":"(static) declaredReplicants​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#declared-replicants","content":" An object containing references to all Replicants that have been declared in this window, sorted by bundle. E.g., NodeCG.declaredReplicants.myBundle.myRep  ","version":"Next","tagName":"h3"},{"title":"bundleConfig​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#bundle-config","content":" An object containing the parsed content of cfg/&lt;bundle-name&gt;.json, the contents of which are read once when NodeCG starts up. Used to quickly access per-bundle configuration properties.  ","version":"Next","tagName":"h3"},{"title":"(readonly) bundleGit​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#bundle-git","content":" Provides information about the current git status of this bundle, if found.  Properties​  Name\tType\tAttributes\tDescriptionbranch\tString What branch this bundle is on. hash\tString The full hash of the commit this bundle is on. shortHash\tString The short hash of the commit this bundle is on. date\tDate\t&lt;optional&gt;\tThe date of the commit this bundle is on. message\tString\t&lt;optional&gt;\tThe message of the commit this bundle is on.  ","version":"Next","tagName":"h3"},{"title":"bundleName​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#bundle-name","content":" The name of the bundle which this NodeCG API instance is for.  ","version":"Next","tagName":"h3"},{"title":"bundleVersion​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#bundle-version","content":" The version (from package.json) of the bundle which this NodeCG API instance is for.  ","version":"Next","tagName":"h3"},{"title":"extensions​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#extensions","content":" Extension Only This can only be used in code which runs on the server.  Object containing references to all other loaded extensions. To access another bundle's extension, it must be declared as a bundleDependency in your bundle's manifest.  bundles/my-bundle/package.json { &quot;name&quot;: &quot;my-bundle&quot; ... &quot;bundleDependencies&quot;: { &quot;other-bundle&quot;: &quot;^1.0.0&quot; } }   bundles/my-bundle/extension.js module.exports = function(nodecg) { const otherBundle = nodecg.extensions['other-bundle']; // Now I can use `otherBundle`! }   ","version":"Next","tagName":"h3"},{"title":"Logger​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#logger","content":" Type: Object  Provides easy access to the Logger class. Useful in cases where you want to create your own custom logger.  ","version":"Next","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#events","content":" Extension Only This can only be used in code which runs on the server.  In your extension code, there are several events emitted on the nodecg object that are available to listen to:  module.exports = function(nodecg) { nodecg.on('extensionsLoaded', () =&gt; { // all bundle extensions have finished loading // this event is probably not that necessary because serverStarted is emitted shortly after }) nodecg.on('serverStarted', () =&gt; { // the web and socket.io servers have started and will accept connections }) nodecg.on('serverStopping', () =&gt; { // the server is shutting down and you can perform cleanup operations here }) nodecg.on('login', (user) =&gt; { // a user has logged in // use Intellisense (autocomplete) to explore the other properties available on the `user` object console.log(user.id, user.name); }); nodecg.on('logout', (user) =&gt; { // a user has logged out // use Intellisense (autocomplete) to explore the other properties available on the `user` object console.log(user.id, user.name); }); }  ","version":"Next","tagName":"h3"},{"title":"socket","type":0,"sectionRef":"#","url":"/docs/classes/socket","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"socket","url":"/docs/classes/socket#example","content":" Listening for socket disconnect events:  nodecg.socket.on(&quot;disconnect&quot;, () =&gt; { console.log(&quot;Socket disconnected!&quot;); });  ","version":"Next","tagName":"h3"},{"title":"stopSound","type":0,"sectionRef":"#","url":"/docs/classes/stopSound","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"stopSound","url":"/docs/classes/stopSound#parameters","content":" Name\tType\tDescriptioncueName\tString\tSound cue's name ","version":"Next","tagName":"h3"},{"title":"stopAllSounds","type":0,"sectionRef":"#","url":"/docs/classes/stopAllSounds","content":"stopAllSounds Browser Only This can only be used in code which runs in Dashboards and Graphics. stopAllSounds() Stops all currently playing sounds on the page.","keywords":"","version":"Next"},{"title":"waitForReplicants","type":0,"sectionRef":"#","url":"/docs/classes/waitForReplicants","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"waitForReplicants","url":"/docs/classes/waitForReplicants#parameters","content":" Name\tType\tDescriptionreplicants\tReplicant\tReplicant objects to wait for  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"waitForReplicants","url":"/docs/classes/waitForReplicants#example","content":" From a graphic or dashboard panel:  const rep1 = nodecg.Replicant('rep1'); const rep2 = nodecg.Replicant('rep2'); // You can provide as many Replicant arguments as you want, // this example just uses two Replicants. NodeCG.waitForReplicants(rep1, rep2).then(() =&gt; { console.log('rep1 and rep2 are fully declared and ready to use!'); });  ","version":"Next","tagName":"h3"},{"title":"unlisten","type":0,"sectionRef":"#","url":"/docs/classes/unlisten","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"unlisten","url":"/docs/classes/unlisten#parameters","content":" Name\tType\tAttributes\tDefault\tDescriptionmessageName\tstring The name of the message. bundleName\tstring\t&lt;optional&gt;\tCurrent bundle\tThe bundle namespace to in which to listen for this message handlerFunc\tfunction A reference to a handler function added as a listener to this message via listenFor.  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"unlisten","url":"/docs/classes/unlisten#example","content":" nodecg.unlisten('printMessage', someFunctionName);   Removing a listener from a message in another bundle's namespace:  nodecg.unlisten('printMessage', 'another-bundle', someFunctionName);  ","version":"Next","tagName":"h3"},{"title":"CLI","type":0,"sectionRef":"#","url":"/docs/cli","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"CLI","url":"/docs/cli#installation","content":" ","version":"Next","tagName":"h2"},{"title":"Global​","type":1,"pageTitle":"CLI","url":"/docs/cli#installation-global","content":" npm install -g nodecg   ","version":"Next","tagName":"h3"},{"title":"In project​","type":1,"pageTitle":"CLI","url":"/docs/cli#installation-local","content":" npm install -D nodecg   ","version":"Next","tagName":"h3"},{"title":"Commands​","type":1,"pageTitle":"CLI","url":"/docs/cli#commands","content":" ","version":"Next","tagName":"h2"},{"title":"nodecg setup [version]​","type":1,"pageTitle":"CLI","url":"/docs/cli#nodecg-setup","content":" mkdir nodecg cd nodecg nodecg setup   Options​  Name\tDescriptionversion\tThe semver version to install. If none then latest will be installed --update -u\tInstall over an existing copy of NodeCG --skip-dependencies -k\tSkip installing dependencies  ","version":"Next","tagName":"h3"},{"title":"nodecg start​","type":1,"pageTitle":"CLI","url":"/docs/cli#nodecg-start","content":" Start the NodeCG instance in this directory path.  Options​  Name\tDescription--disable-source-maps -d\tDisable source map support  ","version":"Next","tagName":"h3"},{"title":"nodecg install [repo]​","type":1,"pageTitle":"CLI","url":"/docs/cli#nodecg-install","content":" Install a bundle by cloning a git repo and installing its production dependencies. If run in a bundle directory with no arguments, installs that bundle's dependencies.  nodecg install username/repository   Options​  Name\tDescriptionrepo\tA GitHub owner/repo pair or https git url --dev -d\tInstall the bundle's devDependencies  ","version":"Next","tagName":"h3"},{"title":"nodecg uninstall [bundle]​","type":1,"pageTitle":"CLI","url":"/docs/cli#nodecg-uninstall","content":" Uninstalls a bundle.  Options​  Name\tDescriptionbundle\tThe bundle's name --force -f\tIgnores warnings  ","version":"Next","tagName":"h3"},{"title":"nodecg defaultconfig​","type":1,"pageTitle":"CLI","url":"/docs/cli#nodecg-defaultconfig","content":" If a bundle has a configschema.json present in its root, this command will create a default config file at nodecg/cfg/&lt;bundleName&gt;.json with defaults based on that schema.  ","version":"Next","tagName":"h3"},{"title":"nodecg schema-types [dir]​","type":1,"pageTitle":"CLI","url":"/docs/cli#nodecg-schema-types","content":" Generate d.ts TypeScript typedef files from Replicant schemas and configschema.json (if present)  Options​  Name\tDefault\tDescriptiondir\tschemas\tThe directory where the replicant schemas are located --out-dir [path] -o\tsrc/types/schemas\tWhere to put the generated d.ts files --no-config-schema Don't generate a typedef from configschema.json ","version":"Next","tagName":"h3"},{"title":"Creating Bundles","type":0,"sectionRef":"#","url":"/docs/creating-bundles-dark","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-dark#examples","content":" Before continuing, you may find it helpful to look over our collection of simple example bundles.  ","version":"Next","tagName":"h2"},{"title":"Using Yeoman​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-dark#yeoman","content":" Use Yeoman and generator-nodecg to generate the beginnings of your new bundle: npm install --global yo generator-nodecg cd bundles mkdir my-first-bundle cd my-first-bundle yo nodecg Answer the prompts one-by-one as they come up. If you wish to access the TypeScript boilerplate, just answer yes to the TypeScript prompt.If you wish to access the React boilerplate, first answer yes to the TypeScript prompt and then also answer yes to the React prompt (we currently have a TypeScript+React template but not a plain JavaScript+React template). note If you created the bundle with typescript (plain typescript or react) you have to compile the bundle using npm run build inside the my-first-bundle directory. (This is likely your issue if you see something like: Error: my-first-bundle has a &quot;nodecg.dashboardPanels&quot; property in its package.json, but no &quot;dashboard&quot; folder when trying to start nodecg) If you generated your bundle with TypeScript, you can use the &quot;dev&quot; script to start NodeCG, automatically re-compile your code when it changes, and also automatically restart NodeCG when specifically server-side code changes (such as your extension): # From the root of your new bundle's folder npm run dev Else, you can start NodeCG the old-fashioned way with the CLI: cd ../.. nodecg start note When running NodeCG in production, Docker or pm2 are recommended. Open the NodeCG Dashboard, which will be located at http://localhost:9090 by default. You should see a page like this: That's it! You can click the &quot;Graphics&quot; button in the top right to see a list of graphics in your installed bundles.  If you have more questions, want further guidance, or would just like to hang out with other NodeCG devs, join our Discord server! ","version":"Next","tagName":"h2"},{"title":"Creating Bundles","type":0,"sectionRef":"#","url":"/docs/creating-bundles","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles#examples","content":" Before continuing, you may find it helpful to look over our collection of simple example bundles.  ","version":"Next","tagName":"h2"},{"title":"Using Yeoman​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles#yeoman","content":" Use Yeoman and generator-nodecg to generate the beginnings of your new bundle: npm install --global yo generator-nodecg cd bundles mkdir my-first-bundle cd my-first-bundle yo nodecg Answer the prompts one-by-one as they come up. If you wish to access the TypeScript boilerplate, just answer yes to the TypeScript prompt.If you wish to access the React boilerplate, first answer yes to the TypeScript prompt and then also answer yes to the React prompt (we currently have a TypeScript+React template but not a plain JavaScript+React template). note If you created the bundle with typescript (plain typescript or react) you have to compile the bundle using npm run build inside the my-first-bundle directory. (This is likely your issue if you see something like: Error: my-first-bundle has a &quot;nodecg.dashboardPanels&quot; property in its package.json, but no &quot;dashboard&quot; folder when trying to start nodecg) If you generated your bundle with TypeScript, you can use the &quot;dev&quot; script to start NodeCG, automatically re-compile your code when it changes, and also automatically restart NodeCG when specifically server-side code changes (such as your extension): # From the root of your new bundle's folder npm run dev Else, you can start NodeCG the old-fashioned way with the CLI: cd ../.. nodecg start note When running NodeCG in production, Docker or pm2 are recommended. Open the NodeCG Dashboard, which will be located at http://localhost:9090 by default. You should see a page like this: That's it! You can click the &quot;Graphics&quot; button in the top right to see a list of graphics in your installed bundles.  If you have more questions, want further guidance, or would just like to hang out with other NodeCG devs, join our Discord server! ","version":"Next","tagName":"h2"},{"title":"Creating Bundles","type":0,"sectionRef":"#","url":"/docs/creating-bundles-light","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-light#examples","content":" Before continuing, you may find it helpful to look over our collection of simple example bundles.  ","version":"Next","tagName":"h2"},{"title":"Using Yeoman​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-light#yeoman","content":" Use Yeoman and generator-nodecg to generate the beginnings of your new bundle: npm install --global yo generator-nodecg cd bundles mkdir my-first-bundle cd my-first-bundle yo nodecg Answer the prompts one-by-one as they come up. If you wish to access the TypeScript boilerplate, just answer yes to the TypeScript prompt.If you wish to access the React boilerplate, first answer yes to the TypeScript prompt and then also answer yes to the React prompt (we currently have a TypeScript+React template but not a plain JavaScript+React template). note If you created the bundle with typescript (plain typescript or react) you have to compile the bundle using npm run build inside the my-first-bundle directory. (This is likely your issue if you see something like: Error: my-first-bundle has a &quot;nodecg.dashboardPanels&quot; property in its package.json, but no &quot;dashboard&quot; folder when trying to start nodecg) If you generated your bundle with TypeScript, you can use the &quot;dev&quot; script to start NodeCG, automatically re-compile your code when it changes, and also automatically restart NodeCG when specifically server-side code changes (such as your extension): # From the root of your new bundle's folder npm run dev Else, you can start NodeCG the old-fashioned way with the CLI: cd ../.. nodecg start note When running NodeCG in production, Docker or pm2 are recommended. Open the NodeCG Dashboard, which will be located at http://localhost:9090 by default. You should see a page like this: That's it! You can click the &quot;Graphics&quot; button in the top right to see a list of graphics in your installed bundles.  If you have more questions, want further guidance, or would just like to hang out with other NodeCG devs, join our Discord server! ","version":"Next","tagName":"h2"},{"title":"Concepts and Terminology","type":0,"sectionRef":"#","url":"/docs/concepts-and-terminology","content":"","keywords":"","version":"Next"},{"title":"Manifest​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#manifest","content":" Every bundle needs a package.json manifest file in its root directory. In addition to the required fields like name and version, NodeCG bundles must also have a nodecg object in their package.json with some additional properties that tell NodeCG how to load your bundle.  ","version":"Next","tagName":"h2"},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#manifest-related-docs","content":" package.json Manifest  ","version":"Next","tagName":"h3"},{"title":"Graphics​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#graphics","content":" Graphics are the end result that your viewers will see. NodeCG itself doesn't provide any libraries for drawing pixels, it instead lets the user decide how they want to create their graphics in the open framework of HTML5, CSS3, and JS (with ES6 being fully supported). NodeCG will also helpfully inject an API instance into the global scope of your graphics, accessible as window.nodecg (or just nodecg) from your graphic's code.  Graphics are defined in your bundle's package.json file, in the nodecg.graphics section, with a few simple properties:  file, the relative path (from your bundle's root directory) to the HTML file to be served as a graphic. Your graphics should all live in the nodecg/your-bundle/graphics/ folder. width and height, which defines the dimensions of your graphic. Note that your graphic doesn't have to strictly adhere to these values, they're mostly for documentation of your bundle. NodeCG doesn't enforce these values. singleInstance, an optional property, that only allows your graphic to be open in one place at a time. This is useful in scenarios where your graphic has fragile or highly stateful logic.Ideally, you'd never need to use singleInstance. However, it is sometimes hard to avoid, and can be the fastest route to shipping a complex graphic.  ","version":"Next","tagName":"h2"},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#graphics-manifest","content":" package.json ManifestUsing npmScreenshot Testing  ","version":"Next","tagName":"h3"},{"title":"Dashboard​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#dashboard","content":" The dashboard is where all your controls for your graphics end up. Each panel is it's own self-contained webpage (displayed as an &lt;iframe&gt;), and has full access to the NodeCG API. Panels are defined in your bundle's package.json file in the nodecg.dashboardPanels section with a few properties:  name, the internal name of your panel.title, the title displayed on the NodeCG workspace.file, the relative path (from your bundle's root directory) to the HTML file to be served as a dashboard panel.width, an optional property, the amount of space the bundle takes up on the page. Valid values are 1-8.Width scaling is arbitrary and is subject to change, play around with it. headerColor, an optional property, that will change the color of the panel's header to a provided hexadecimal color value. Your headerColor must start with a # character. For example: #f47425. workspace, an optional property, that when set will place the panel into a new workspace with the name provided. These workspaces can be shared between bundles.fullbleed, an optional property, that when set to true will place the panel in it's own workplace at the maximum possible width and height with no margins. Each fullbleed panel gets its own dedicated workspace. dialog, an optional property, that will turn the panel into a dialog that other panels are able to open.dialogButtons, an optional property, that will show buttons for confirm, dismiss, or both on the dialog.  ","version":"Next","tagName":"h2"},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#dashboard-manifest","content":" package.json ManifestMaking dialogsUsing npmSoundsAssets  ","version":"Next","tagName":"h3"},{"title":"Extensions​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#extensions","content":" Extensions are the back-end portion of your graphics and dashboard panels, typically handling all the potential messy logic that your bundle may need to handle, such as donations or schedule handling. NodeCG will try and require your bundle's extensions folder, so if used an index.js file is needed. Each extension must export a function that accepts a NodeCG API instance as its first and only argument.  Not all bundles might require an extension to back them up, but you should consider one if your bundle might be handling any API work.  Example:  // nodecg/bundles/your-bundle/extension.js module.exports = nodecg =&gt; { nodecg.listenFor('foo', () =&gt; { console.log('bar'); }); };   NodeCG automatically attempts to load the following files as extensions:  nodecg/bundles/your-bundle/extension.jsnodecg/bundles/your-bundle/extension/index.js  Your bundle may have one of, but not both of the above files. If your extension is simple enough to fit in one file, use the former approach. If your extension is broken up into multiple files, you may want to use the latter structure and keep all those files in a single extension folder. If using an extension folder, NodeCG will only load your-bundle/extension/index.js. It is up to you to load any other files that your extension needs via require.  ","version":"Next","tagName":"h2"},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#extensions-manifest","content":" Extensionspackage.json ManifestUsing npmCustom routesBundle configurationMounts  ","version":"Next","tagName":"h3"},{"title":"Messages​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#messages","content":" Messages are the way NodeCG lets extensions, dashboard panels, and the graphics communicate with each other seamlessly. A message can be anything, from an array to an object to a string, as long as it can be represented in Javascript, you can send it. All you have to do is call nodecg.sendMessage on one end and nodecg.listenFor on another!  ","version":"Next","tagName":"h2"},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#messages-manifest","content":" sendMessagesendMessageToBundlelistenFor  ","version":"Next","tagName":"h3"},{"title":"Replicants​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#replicants","content":" Replicants are how NodeCG stores and replicates data between extensions, dashboard panels, and graphics. Rather than being events like messages are, Replicants are (optionally) persistent.  Replicants on server-side extensions are able to be read synchronously, as NodeCG has immediate access to the database of replicants, but in dashboard panels and graphics you should read Replicants asynchronously by listening for the change event.  ","version":"Next","tagName":"h2"},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#replicants-manifest","content":" ReplicantReplicant Validation ","version":"Next","tagName":"h3"},{"title":"Manually editing the database","type":0,"sectionRef":"#","url":"/docs/editing-the-database","content":"Manually editing the database As of v2.0.0, NodeCG is backed by a local sqlite3 database. This was done for internal reasons that make NodeCG's code better and easier to maintain, but it does mean that simple inspection, editing, and deletion of *.rep files (persisted Replicant values) is no longer possible. Instead, deployment managers may use a tool such as DB Browser to open, inspect, and edit their NodeCG instance's database, including Replicant values. This should only be done when NodeCG isn't running. To get started, simply use DB Browser to open nodecg/db/nodecg.sqlite3. Make your changes and save the file, and that's it!","keywords":"","version":"Next"},{"title":"Custom Routes","type":0,"sectionRef":"#","url":"/docs/custom-routes","content":"Custom Routes NodeCG uses express for its routing, and exposes a helper for creating routes easily: bundles/my-bundle/extension.js module.exports = function(nodecg) { const router = nodecg.Router(); router.get('/customroute', (req, res) =&gt; { res.send('OK!'); }); nodecg.mount('/my-bundle', router); // The route '/my-bundle/customroute` is now available }; NodeCG has a Login Security Middleware that is by default not enabled. To enable it, you need to add it. This won't work unless Security &amp; Authentication is enabled. bundles/my-bundle/extension.js module.exports = function(nodecg) { const router = nodecg.Router(); router.use(nodecg.util.authCheck); // All routes using &quot;router&quot; will need a `?key=` in it's URL to be avaliable router.get('/customroute', (req, res) =&gt; { res.send('OK!'); }); nodecg.mount('/my-bundle', router); // The route '/my-bundle/customroute` is now available }; ","keywords":"","version":"Next"},{"title":"TypeScript","type":0,"sectionRef":"#","url":"/docs/frameworks/typescript","content":"","keywords":"","version":"Next"},{"title":"Setup​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#setup","content":" Install TypeScript as your bundle's dev dependency.  npm install -D typescript   ","version":"Next","tagName":"h2"},{"title":"Typing Replicants​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#typing-replicants","content":" Optionally, you can define types of replicants using replicants' JSON schema.  Define schema for replicantsUse CLI's nodecg schema-types command to convert JSON schema to TypeScript type definitionsImport the type and pass it to type parameter like this:  import { ExampleReplicant } from '../types/schemas/example_replicant'; const rep = nodecg.Replicant&lt;ExampleReplicant&gt;('example_replicant');   ","version":"Next","tagName":"h2"},{"title":"Using Type Definitions​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#type-definitions","content":" If you have not installed nodecg in your project:  npm install -D nodecg   The majority of the types are used by importing the types package and referencing the types that way, but to access the browser globals (window.nodecg and window.NodeCG), an extra step is required. You'll need to modify your bundle's tsconfig.json files(s) in one of two ways achieve this:  The first approach is to use include to reference the file that augments the window object:  { &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;node_modules/nodecg/types/augment-window.d.ts&quot;] }   If you use Vue, be sure to include your *.vue files as well:  { &quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;**/*.vue&quot;, &quot;node_modules/nodecg/types/augment-window.d.ts&quot;] }   The second approach is to use types:  { &quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;node&quot;, &quot;express&quot;, &quot;nodecg/types/augment-window&quot;] } }   Both of these approaches have pros and cons, so be sure to read their corresponding TypeScript tsconfig.json docs thoroughly.  ","version":"Next","tagName":"h2"},{"title":"extension​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#extension","content":" import NodeCG from 'nodecg/types'; export = (nodecg: NodeCG.ServerAPI) =&gt; { nodecg.sendMessage('message'); }   ","version":"Next","tagName":"h3"},{"title":"dashboard/graphics​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#dashboard","content":" // Some types get automatically injected into the global scope by our tsconfig.json. // For everything else, you can `import NodeCG from 'nodecg/types'` just as in our extension example. nodecg.listenFor('message', () =&gt; { // ... })  ","version":"Next","tagName":"h3"},{"title":"Docker","type":0,"sectionRef":"#","url":"/docs/docker","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Docker","url":"/docs/docker#introduction","content":" Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is. Containerization is increasingly popular because containers are: Flexible: Even the most complex applications can be containerized.Lightweight: Containers leverage and share the host kernel.Interchangeable: You can deploy updates and upgrades on-the-fly.Portable: You can build locally, deploy to the cloud, and run anywhere.Scalable: You can increase and automatically distribute container replicas.Stackable: You can stack services vertically and on-the-fly. Source Get Started - docs.docker.com  Docker provides a lot of useful features for NodeCG:  No need to care about dependencies; they are all bundled with the Docker image.Run it everywhere.Easy upgrades.  ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Docker","url":"/docs/docker#prerequisites","content":" Docker (modern versions of Docker Desktop come with the docker compose command and it no longer needs to be separately installed)  ","version":"Next","tagName":"h2"},{"title":"Simple Deployment & Testing​","type":1,"pageTitle":"Docker","url":"/docs/docker#deployment","content":" If you want to use containerized NodeCG in the simplest possible deployment, all you have to do is run:  # If on Windows: run this command in Git Bash, not Command Prompt or PowerShell. docker run \\ -p 9090:9090/tcp \\ -v &quot;/$PWD/cfg:/opt/nodecg/cfg&quot; \\ -v &quot;/$PWD/bundles:/opt/nodecg/bundles&quot; \\ -v &quot;/$PWD/logs:/opt/nodecg/logs&quot; \\ -v &quot;/$PWD/db:/opt/nodecg/db&quot; \\ -v &quot;/$PWD/assets:/opt/nodecg/assets&quot; \\ -it ghcr.io/nodecg/nodecg:latest   This command will bind the cfg, bundles, logs, db, and assets folders from the current working directory into the NodeCG Docker container, making them available to NodeCG at runtime. This is one way to get bundles into a containerized instance of NodeCG. Likewise, NodeCG can write the database, logs, and assets back into these directories on the host filesystem, allowing for persistence.  ","version":"Next","tagName":"h2"},{"title":"Advanced Deployment​","type":1,"pageTitle":"Docker","url":"/docs/docker#advanced-deployment","content":" For more advanced deployments, you may also build your own Docker image to hold all your bundles and configuration.  Example Dockerfile:  # Specifies the base image to build on top of. # It also creates a nodecg user with appropriate permissions. FROM ghcr.io/nodecg/nodecg:latest # This is one way to install a bundle and generate a config for it. # You may need to take a different approach depending on your use case. # Be sure to replace [bundle-repo] and [bundle-name] with actual values and remove the brackets ([]). RUN nodecg install [bundle-repo] &amp;&amp; nodecg defaultconfig [bundle-name] # This copies your NodeCG config into the container, which is a tradeoff. # The benefit is that you don't need to worry about copying the config file around between deployments. # The drawbacks are that you cannot easily change this config once it is in the container and that anyone with access to the docker image will have access to the secrets in the configuration files. # If you don't want to put your configuration inside the image, then use the volume mounting approach outlined in the Simple Deployment section above. # If you use a *.yaml or *.js config file, be sure to edit this command to reflect that. COPY ./cfg/nodecg.json /opt/nodecg/cfg/nodecg.json # The principles outlined above apply to any file that is part of your NodeCG deployment: you can either put it in the container or you can mount it from a volume. The base nodecg/nodecg Docker image already defines volume mount points for the cfg, bundles, logs, db, and assets directories. It is recommended that you mount logs, db, and assets as volumes so that NodeCG can persist data in those folders to the host filesystem, meaning that they will be carried over when you update your Docker image and redeploy. For the cfg and bundles directories, it is up to you whether you want to bake them into your image or if you want to mount them as volumes. # This is how you'd copy a specific bundle from the build directory into your image: COPY ./bundles/example-bundle /opt/nodecg/bundles/example-bundle # This is how you'd copy all bundles from the build directory into your image: COPY ./bundles /opt/nodecg/bundles # This is how you'd copy all config files fmr the build directory into your image: # Again, be warned that anyone with access to this image will be able to read the secrets from these files. COPY ./cfg /opt/nodecg/cfg   Now use Docker to build your image from the Dockerfile you just created:  # Be sure to replace [your-image-name] with an actual name and remove the brackets ([]). # Do not omit the &quot;.&quot; at the end of the command. docker build -t [your-image-name] .   And run it with:  # If on Windows: run this command in Git Bash, not Command Prompt or PowerShell. docker run \\ -p 9090:9090/tcp \\ -v &quot;/$PWD/logs:/opt/nodecg/logs&quot; \\ -v &quot;/$PWD/db:/opt/nodecg/db&quot; \\ -v &quot;/$PWD/assets:/opt/nodecg/assets&quot; \\ -it [your-image-name]   Or create a docker-compose.yml like this:  services: nodecg: image: '[your-image-name]' ports: - '9090:9090' volumes: - '[absolute path to logs dir on host filesystem]:/opt/nodecg/logs' - '[absolute path to db dir on host filesystem]:/opt/nodecg/db' - '[absolute path to assets dir on host filesystem]:/opt/nodecg/assets'   To pin NodeCG to a specific version, replace FROM ghcr.io/nodecg/nodecg:latest with FROM ghcr.io/nodecg/nodecg:release:[specific version]  warning If you want to host your NodeCG instance on the internet (instead of just on a secure LAN), it is highly recommended to encrypt and secure NodeCG. To encrypt the traffic, you can use a TLS/SSL termination proxy like: Traefik - Really neat if you host a lot of services in Docker.Docker Flow Proxy - Similar to Traefik.Caddy - Be aware of the licensing of the binaries. It should be ok if you build it yourself e.g. in a Docker image. No guarantee.nginx-proxy w/ letsencrypt - Useful if you're already familiar with nginx or have existing site configurations you'd like to port over.Others - There are a lot of other solutions. Choose what fits you best. To secure NodeCG, follow the Security &amp; Authentication guide. ","version":"Next","tagName":"h2"},{"title":"Using p5.js","type":0,"sectionRef":"#","url":"/docs/frameworks/using-p5js","content":"Using p5.js p5.js is a library to make javascript more accessible to people. It can easily be implemented into NodeCG simply by including both the standard p5.js file and the p5.dom library in the shared folder as this folder is always mounted. p5.js can be used as normal and NodeCG calls are included when needed. An example bundle containing a counter and a lower third is located in the NodeCG simple examples repo.","keywords":"","version":"Next"},{"title":"Extensions","type":0,"sectionRef":"#","url":"/docs/extensions","content":"","keywords":"","version":"Next"},{"title":"What to use extensions for​","type":1,"pageTitle":"Extensions","url":"/docs/extensions#what-to-use-extensions-for","content":" Setting up replicantsHandling changes to replicants to keep dashboards as a &quot;dumb terminal&quot;Getting data from other websites/servicesAutomating your bundle  ","version":"Next","tagName":"h2"},{"title":"Extension entrypoint​","type":1,"pageTitle":"Extensions","url":"/docs/extensions#extension-entrypoint","content":" NodeCG looks for 2 file locations.  A single file called extension.js in the bundle's root directory.A folder called extension with an index.js in the bundle's root directory.  If both exist NodeCG will throw an error and not run any extensions from that bundle.  tip We recommend the folder method unless your bundle is very basic and doesn't need much functionality.  ","version":"Next","tagName":"h2"},{"title":"Single file​","type":1,"pageTitle":"Extensions","url":"/docs/extensions#single-file","content":" extension.js module.exports = function (nodecg) { nodecg.Replicant('test-replicant'); }   ","version":"Next","tagName":"h2"},{"title":"Using multiple files​","type":1,"pageTitle":"Extensions","url":"/docs/extensions#using-multiple-files","content":" To make programming easier we split different functionality into different files. The problem is that NodeCG is only injected into the first file it touches. There are a few methods to deal with this:  ","version":"Next","tagName":"h2"},{"title":"Utility script​","type":1,"pageTitle":"Extensions","url":"/docs/extensions#utility-script","content":" nodecg-api-context.ts import type NodeCG from 'nodecg/types'; let context: NodeCG.ServerAPI; export function get(): NodeCG.ServerAPI { return context; } export function set(ctx: NodeCG.ServerAPI) { context = ctx; }   index.ts import type NodeCG from 'nodecg/types'; import * as nodecgApiContext from './nodecg-api-context'; let ncgConfig: NodeCG.ServerAPI&lt;ConfigSchema&gt;['bundleConfig']; module.exports = (nodecg: NodeCG.ServerAPI) =&gt; { // Store a reference to this nodecg API context in a place where other libs can easily access it. // This must be done before any other files are `require`d. nodecgApiContext.set(nodecg); ncgConfig = nodecg.bundleConfig; init().then(() =&gt; { nodecg.log.info('Initialization successful.'); }).catch(error =&gt; { nodecg.log.error('Failed to initialize:', error); }); }; async function init() { require('./example.ts'); }   example.ts import * as nodecgApiContext from './nodecg-api-context'; const nodecg = nodecgApiContext.get(); // Initializes a replicant nodecg.Replicant&lt;string&gt;('test-replicant');   ","version":"Next","tagName":"h3"},{"title":"Have each extension export a function to call​","type":1,"pageTitle":"Extensions","url":"/docs/extensions#have-each-extension-export-a-function-to-call","content":" example.ts import type NodeCG from 'nodecg/types'; export const test = (nodecg: NodeCG) =&gt; { nodecg.Replicant&lt;string&gt;('test-replicant'); }   index.ts import type NodeCG from 'nodecg/types'; import { test } from &quot;./example&quot;; export default (nodecg: NodeCG) =&gt; { test(nodecg); };   ","version":"Next","tagName":"h3"},{"title":"Extension specific API​","type":1,"pageTitle":"Extensions","url":"/docs/extensions#extension-specific-api","content":" getSocketIOServermountRouterEvents ","version":"Next","tagName":"h2"},{"title":"Using Vue.js","type":0,"sectionRef":"#","url":"/docs/frameworks/vue","content":"Using Vue.js caution Work in progress Example bundles: Vue and TypeScript template","keywords":"","version":"Next"},{"title":"Bundlers & Developer Setup","type":0,"sectionRef":"#","url":"/docs/frameworks/using-bundlers","content":"","keywords":"","version":"Next"},{"title":"Bundlers​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#bundlers","content":" Webpack, the most used bundler, has some good documentation for why to use Webpack.  There are several JavaScript bundlers.  webpack By far the most used bundler with a lot of community made extensions. rollup Primarily used by libraries like React, Vue - utilizes ES Modules for splitting code parcel Bundler famous for zero-config and super fast building process esbuild Extremely fast bundler written in Go, however currently the maintainers state that it is unstable for production usage.  These bundlers allows you to  write modular, organised source codetreat CSS, images, or any sort of files like JavaScript moduleuse npm packages for front-end (dashboard/graphics)use JSX/TSX, Vue single file componentwrite in other languages like TypeScriptand many more  ","version":"Next","tagName":"h2"},{"title":"Tutorial: Using Parcel​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#parcel","content":" caution The below tutorial focuses solely on bundler tooling with NodeCG and was last updated in November 2020; functionality may be limited due to updates in underlying tools, particularly Parcel. If you run into issues, feel free to put in a pull request.  ","version":"Next","tagName":"h2"},{"title":"Directory Structure​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#parcel-structure","content":" Basically you will have parcel to output the whole dashboard and graphicsdirectory. Your project would look like this  foo-layouts |- extension |- schemas |- src |- package.json   When you run parcel, it will make dashboard and graphics directory and output bundle result into them.  (After running parcel)  foo-layouts |- extension |- schemas |- src |- package.json |- dashboard (built) |- index.html |- styles.8jx17sx.css |- main.7x2hdjs.js |- graphics (built) |- ds1.html |- sd1.html |- styles.03nsh2s.css |- ds1.rssiahs.js |- sd1.4jc71nx.js |- background.d8frsis.png   The random string for each generated files are automatically generated to refresh cache when the files change.  ","version":"Next","tagName":"h3"},{"title":"Setup​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#parcel-setup","content":" As I said, parcel is (literally) zero-configuration required. It even installs missing packages for you if there is any.  Add parcel to your bundle​  Locally​  npm install --save-dev parcel-bundler   The parcel command will be available locally. You can run it either adding npm scripts, or npx parcel  Make an entrypoint​  When building front-end, HTML file is usually used as entrypoint. You can just use your HTML file with your scripts and stylesheets imported.  &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./styles.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;tech&quot;&gt;&lt;/div&gt; &lt;!-- Or a lot of pre-defined elements --&gt; &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;   The entrypoint HTML file will also be compiled in the bundler. So you can have many kind of files in the script tag. Parcel will automatically detect file format and use an appropriate library/compiler to bundle the file.  &lt;script src=&quot;./main.coffee&quot;&gt;&lt;/script&gt;   &lt;script src=&quot;./app.tsx&quot;&gt;&lt;/script&gt;   Or the entrypoint doesn't even have to be an HTML file. For example, you can usePug to have common parts of HTML file into one file.  doctype html html head title graphics-ds include lib/common.pug body div(id=&quot;ds&quot;) script(src=&quot;./views/ds.ts&quot;)   Run the command​  For development, with file change detection and hot-reloading:  parcel watch src/dashboard/index.html --out-dir dashboard --public-url ./   For production build, with optimized output:  parcel build src/dashboard/index.html --out-dir dashboard --public-url ./   (Replace src/dashboard/index.html with your entrypoint files.)  You can use a glob pattern to use multiple entrypoints, if you have multiple pages to compile  parcel build src/dashboard/*.html --out-dir dashboard --public-url ./   A detailed reference can be found in the Parcel CLI reference documentation.  Recommended Configuration​  Even though it already works for most cases (!), a bit of configuration might be recommended/required.  browserslist​  Parcel uses babel out of box, and the default supported browsers are &gt;0.25% which includes old browsers like IE.  Considering how NodeCG is used, it's the best to target only modern browsers or just Chrome. To do so, add browserslist property to package.json.  For example,  { // ... &quot;browserslist&quot;: &quot;last 2 chrome versions&quot;, &quot;nodecg&quot;: //... }   Refer to this page for detailed browserslist syntax.  Going further​  Due to the huge amount of features parcel offers out of box, at this point you already have a lot more options for your front-end development. For example:  React development with JSX/TSXVue single file componentTypeScript or other alternative languages  Also, if your project becomes too advanced for parcel to handle, you can switch to webpack - there are tools that can do this configuration conversion, to either Webpack or other tools like Vite, WMR, or Turbopack. ","version":"Next","tagName":"h3"},{"title":"Installing NodeCG (New, Experimental)","type":0,"sectionRef":"#","url":"/docs/installing-new","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"Installing NodeCG (New, Experimental)","url":"/docs/installing-new#install","content":" npm install nodecg   ","version":"Next","tagName":"h2"},{"title":"Start​","type":1,"pageTitle":"Installing NodeCG (New, Experimental)","url":"/docs/installing-new#start","content":" Run npx nodecg start.  Open the dashboard (http://localhost:9090 by default).  ","version":"Next","tagName":"h2"},{"title":"Using multiple bundles​","type":1,"pageTitle":"Installing NodeCG (New, Experimental)","url":"/docs/installing-new#multi-bundle","content":" You can use multiple bundles in your project by including it in bundles directory in your project root.  ","version":"Next","tagName":"h2"},{"title":"Migration from legacy structure​","type":1,"pageTitle":"Installing NodeCG (New, Experimental)","url":"/docs/installing-new#migration","content":" If you have an existing NodeCG projects that run inside NodeCG's bundles directory, you can migrate to the new structure by following these steps:  If you run multiple bundles, choose one of them to be the main project.Move the main bundle as an independent project root.Install NodeCG as a dependency of the main project by running npm install nodecg.Move the other bundles to the bundles directory in the main project root.Move the following directories from the previous NodeCG root: cfgdblogsassets Start NodeCG by running npx nodecg start in the main project root. ","version":"Next","tagName":"h2"},{"title":"Making Dashboard Dialogs","type":0,"sectionRef":"#","url":"/docs/making-dialogs","content":"","keywords":"","version":"Next"},{"title":"Opening dialogs​","type":1,"pageTitle":"Making Dashboard Dialogs","url":"/docs/making-dialogs#opening","content":" To open a dialog, add a nodecg-dialog attribute to any clickable element on one of your panels. For example, this&lt;paper-button&gt; element will open the edit-total dialog when clicked:  &lt;paper-button id=&quot;edit&quot; class=&quot;nodecg-configure&quot; nodecg-dialog=&quot;edit-total&quot;&gt;Edit...&lt;/paper-button&gt;   When a dialog is opened, NodeCG will emit a dialog-opened event on your dialog's document. For example:  &lt;!-- bundles/my-bundle/dashboard/my-dialog.html --&gt; &lt;script&gt; document.addEventListener('dialog-opened', function() { // The user opened the dialog. }); &lt;/script&gt;   ","version":"Next","tagName":"h2"},{"title":"Closing dialogs​","type":1,"pageTitle":"Making Dashboard Dialogs","url":"/docs/making-dialogs#closing","content":" By default, a dialog can only be closed by clicking outside of it. Optional confirmation and dismissal buttons can be added via package.json. See the package.json tutorial for information on the dialogButtonsproperty.  When a confirm or dismiss button is pressed, NodeCG will emit a dialog-confirmed or dialog-dismissed event on your dialog's document. For example:  &lt;!-- bundles/my-bundle/dashboard/my-dialog.html --&gt; &lt;script&gt; document.addEventListener('dialog-confirmed', function() { // The user pressed the confirm button. }); document.addEventListener('dialog-dismissed', function() { // The user pressed the dismiss button. }); &lt;/script&gt;  ","version":"Next","tagName":"h2"},{"title":"Installing NodeCG","type":0,"sectionRef":"#","url":"/docs/installing","content":"","keywords":"","version":"Next"},{"title":"Install​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#install","content":" There are two methods to install NodeCG: cloning from GitHub or using the CLI.  Install Node.js (version 22).  Using the CLI:  npm install --global nodecg@latest mkdir nodecg cd nodecg nodecg setup   Cloning from GitHub:  # Be sure to clone a specific release's tag name. git clone --depth 1 --branch v2.1.0 https://github.com/nodecg/nodecg.git cd nodecg npm install npm run build   ","version":"Next","tagName":"h2"},{"title":"Start​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#start","content":" Run node index.js or nodecg start in the root nodecg folder.  Open the dashboard (http://localhost:9090 by default).  note When running NodeCG in production, Docker or pm2 are recommended.  ","version":"Next","tagName":"h2"},{"title":"Installing bundles​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#installing-bundles","content":" NodeCG's individual graphics packages are called bundles. They can be installed either from the command-line (via CLI), or by simply placing the folder into the ./bundles directory.  The easiest way to install bundles is via the command-line.  ","version":"Next","tagName":"h2"},{"title":"GitHub​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#installing-bundles-github","content":" nodecg install username/repo-name   ","version":"Next","tagName":"h3"},{"title":"BitBucket​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#installing-bundles-bitbucket","content":" nodecg install bitbucket:username/repo-name   ","version":"Next","tagName":"h3"},{"title":"Other Providers​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#installing-bundles-other","content":" Enter the git URL.  nodecg install https://gitlab.com/username/repo-name.git   Bundles are just directories inside the ./bundles folder. They can always be added and removed by simply moving them into or out of that folder. Avoid installing or uninstalling bundles while NodeCG is running. ","version":"Next","tagName":"h3"},{"title":"Migrating from 0.7 to 0.8","type":0,"sectionRef":"#","url":"/docs/migrating/migrating-0.7-to-0.8","content":"","keywords":"","version":"Next"},{"title":"Breaking Changes​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#breaking-changes","content":" Breaking Changes Replicant Change EventPanel RoutesAssets &amp; Asset Categories  ","version":"Next","tagName":"h2"},{"title":"Replicant Change Event​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#replicant-change-event","content":" Prior to NodeCG v0.8, the Replicant change handler had the following signature:  // NodeCG v0.7 and earlier myRep.on('change', function (oldVal, newVal, changes) {});   In v0.8, newVal and oldVal have been swapped, as newVal is frequently used whereas oldVal is less frequently used.  // NodeCG v0.8 and later myRep.on('change', function(newVal, oldVal, operations) {});   ","version":"Next","tagName":"h3"},{"title":"Panel Routes​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#panel-routes","content":" Dashboard panels are now served from /panel/:bundleName/:panelFile routes. Prior to v0.8, they were served from the/panel/:bundleName/:panelName route.  This means that for a panel with the following declaration:  { &quot;name&quot;: &quot;test&quot;, &quot;title&quot;: &quot;Test Panel&quot;, &quot;width&quot;: 2, &quot;file&quot;: &quot;panel.html&quot; }   ... the route to access this panel is now /panel/test-bundle/panel.html instead of /panel/test-bundle/test.  This also affects panels served from subfolders. Previously, the following panel:  { &quot;name&quot;: &quot;test-dialog&quot;, &quot;title&quot;: &quot;Test Dialog&quot;, &quot;width&quot;: 2, &quot;file&quot;: &quot;dialogs/test-dialog.html&quot; }   ... would have been served from /panel/test-bundle/test-dialog. It is now served from /panel/test-bundle/dialogs/test-dialog.html.  If your panel or dialog is in a subfolder, you will need to update any relative links in your panel's HTML, CSS, and JS accordingly. For example, if test-dialog were importing &lt;paper-button&gt;, the URL it uses would have to change:  &lt;!-- Won't work anymore. --&gt; &lt;link rel=&quot;import&quot; href=&quot;components/paper-button/paper-button.html&quot; /&gt; &lt;!-- Works with the new panel routes. --&gt; &lt;link rel=&quot;import&quot; href=&quot;../components/paper-button/paper-button.html&quot; /&gt;   ","version":"Next","tagName":"h3"},{"title":"Assets & Asset Categories​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#assets--asset-categories","content":" NodeCG v0.7.2 introduced the Uploads system. NodeCG v0.8 has renamed this system to &quot;Assets&quot;, and introduces the concept of categories. See the [Assets tutorial]tutorial assets for more information on how to configure Assets for your bundle. ","version":"Next","tagName":"h3"},{"title":"package.json Manifest","type":0,"sectionRef":"#","url":"/docs/manifest","content":"","keywords":"","version":"Next"},{"title":"nodecg.compatibleRange​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#compatible-range","content":" A semver range that defines which version(s) of NodeCG this bundle is compatible with. This bundle will not load in NodeCG versions outside the specified range.  This field is required.  ","version":"Next","tagName":"h2"},{"title":"nodecg.bundleDependencies​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#bundle-dependencies","content":" Formatted identically to npm's dependencies field, but behaves differently. Bundles declared as bundleDependencies are not automatically installed. This field's only job is to ensure that dependant bundles are loaded first. In the above example, other-bundle would be loaded before example-bundle, and if other-bundle fails to load then so will example-bundle.  This field is only required if your bundle makes use of the nodecg.extensions API.  ","version":"Next","tagName":"h2"},{"title":"nodecg.dashboardPanels​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#dashboard-panels","content":" An array of objects, each object describing an individual dashboard panel or dialog. Every panel and dialog must have a name, title, and file. file is relative to the bundle's dashboard folder.width is optional, and defaults to 2. The width scale is arbitrary and may change, so you'll want to play around with this number to get the desired width.  Panels also have an optional headerColor property that accepts a hex color string.  You can split your panels up into multiple workspaces. By default all panels are added to the same workspace. If you'd like to specify a different workspace, simply provide a workspace name as the workspace property. Workspaces work across bundles. If my-bundle and your-bundle both declare a panel in the Shared Workspaceworkspace, then both of our panels will show up together.  If you have a really big panel that simply needs to be in its own workspace and have maximized screenspace, give it the fullbleed property. Fullbleed panels are put into their own workspace and have no margins around them. This is good for when you have a large, complex UI that you need more fine-grained control over.    To mark a panel as a dialog, it must have the dialog property set to true. Dialogs don't immediately display on the dashboard, and must be manually invoked. See Making Dashboard Dialogs for more info. (Screenshot of an open dialog)  Dialogs have special buttons for confirmation and dismissal, which are defined in the dialogButtons property. There are only two types of dialogButton: confirm and dismiss. When one of these buttons is pressed, adialog-confirmed or dialog-dismissed event is emitted on the dialog's document to allow for easy handling with less boilerplate.  This field is only required if your bundle has dashboard panels.  ","version":"Next","tagName":"h2"},{"title":"nodecg.graphics​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#graphics","content":" An array of objects, each object describing a graphic. Each graphic must have a file, width, and height. file is relative to the bundle's graphics folder. If you wish to enforce that your graphic only ever be open in one place at a time, set singleInstance to true(defaults to false).  This field is only required if your bundle has graphics. ","version":"Next","tagName":"h2"},{"title":"Migrating from 0.8 to 0.9","type":0,"sectionRef":"#","url":"/docs/migrating/migrating-0.8-to-0.9","content":"","keywords":"","version":"Next"},{"title":"Breaking Changes​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#breaking-changes","content":" Breaking Changes Routing ChangesRemoved Default StylessendMessage acknowledgement ErrorsNo Auto-Installation of DependenciesRemoved Rollbar integration, replaced it with Sentry  ","version":"Next","tagName":"h2"},{"title":"Routing Changes​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#routing-changes","content":" NodeCG's routing has always been a little arbitrary and confusing. It did not match the structure of the filesystem, and there wasn't really a good reason for this. This arbitrary routing structure was hard to remember and prevented bundle authors from taking advantage of their IDE's autocomplete functionality. It also made using filesystem-aware tools like the polymer-bundler (formerly called vulcanize) needlessly difficult.  The new routing structure matches the structure of the filesystem, making routes easier to work with and avoiding certain bugs relating to the de-duplication of HTML Imports (and soon, ES Modules).  Old (don't use these anymore!):  /panels/my-bundle/panel.html /graphics/my-bundle/graphic.html # Two different routes to the same file! This breaks the de-duplication of HTML Imports and causes errors. /panels/my-bundle/components/polymer/polymer.html /graphics/my-bundle/components/polymer/polymer.html   New:  /bundles/my-bundle/dashboard/panel.html /bundles/my-bundle/graphics/graphic.html # Now, there is only one single route to any given file. /bundles/my-bundle/bower_components/polymer/polymer.html   ","version":"Next","tagName":"h3"},{"title":"Removed Default Styles​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#removed-default-styles","content":" Up until now, NodeCG has injected some default styles and helper classes into each and every panel. The idea was to provide a set of base styles that every bundle author could use to try to create a cohesive NodeCG panel design across all bundles.  However, this set of styles was far too small and limited to achieve that, and upon further reflection we decided that NodeCG core was not the place to attempt to accomplish this. Additionally, it's possible for these injected styles to cause frustrating conflicts.  NodeCG does still inject a few default styles, but the number of styles has been dramatically reduced to just a few necessary things, such as the background color for panels. And, as always, this value can be easily overridden in your panel's CSS.  If your panels relied on any of these default styles or helper classes such as nodecg-configure, you will need to manually specify new styles instead.  ","version":"Next","tagName":"h3"},{"title":"sendMessage acknowledgement Errors​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#sendmessage-acknowledgement-errors","content":" In the past, if you tried to reply to a sendMessage with an Error, you'd end up with just an empty Object at the other end ({}). This is because by default, JavaScript Errors are serialized as an empty Object by JSON.stringify.  Now, if the first argument to a sendMessage acknowledgement is an error, it will be properly serialized and sent across the wire. As part of this, we are now strongly encouraging that all sendMessage acknowledgements always be treated as standard error-first Node.js-style callbacks.  In addition, client-side sendMessage now also returns a Promise, so that you may use .then/.catch instead of a callback function. See the updated sendMessage documentation for more information.  Please note that if you do not specify a callback to your sendMessage, then it will always return a Promise. Additionally, the first argument sent back in your acknowledgement is always assumed to be either an Error or null. If this value is truthy, then it will be used to reject the Promise. For this reason, it is strongly encouraged that all sendMessage acknowledgements strictly adhere to the error-first style of callbacks.  ","version":"Next","tagName":"h3"},{"title":"No Auto-Installation of Dependencies​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#no-auto-installation-of-dependencies","content":" Since the earliest versions of NodeCG, it has attempted to be helpful by automatically running both npm install --production and bower install on every installed bundle, every time you started up NodeCG. While some users may have found this helpful, over time we've come to realize that this was a misguided decision, and that installation of each bundle's dependencies should really be left to the user.  The main rationale for the removal of this feature is that there's a lot more package managers out there than just npm and bower, and it's not reasonable for NodeCG to know about every single one of them and to be able to properly invoke them. The auto-dependency installation system made a lot of assumptions, and it's going to become more and more frequent that these assumptions just aren't valid. For example, if a bundle doesn't have a bower.json, then running bower install on it would actually have unintended side-effects. This is just one example that is easy to fix on its own, but there are many such examples of odd side-effects and unintended consequences of this automatic installation behavior. Together, they paint a clear picture that this feature was misguided, and should be removed.  Going forward, users will always need to manually run whatever dependency installation steps are required by the bundle in question. For most bundles, this still means just running npm install --production &amp;&amp; bower install, but this will not always be the case. Each bundle will need to add their dependency installation steps to their READMEs, and make sure that users are educated in the fact that pulling down new updates to a bundle means that they may need to also install updated dependencies.  ","version":"Next","tagName":"h3"},{"title":"Removed Rollbar integration, replaced it with Sentry​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#removed-rollbar-integration-replaced-it-with-sentry","content":" In NodeCG v0.8, we introduced a first-class integration with the Rollbar error tracking service. This was very helpful and made NodeCG safer to use in production, but we were unhappy with the level of service and features that Rollbar provided. In NodeCG v0.9, we have removed the Rollbar integration and replaced it with a Sentry integration. See the Sentry tutorial for more info on how to set up Sentry in your NodeCG deployment. ","version":"Next","tagName":"h3"},{"title":"Mount folders as endpoints","type":0,"sectionRef":"#","url":"/docs/mounts","content":"Mount folders as endpoints As of v0.9.9, NodeCG supports a nodecg.mount array in your bundle's package.json. These mount declarations are simple objects with two keys: directory and endpoint. directory is a relative path from the root of your bundle which tells NodeCG which folder you'd like to mount as a custom endpoint. endpoint is a URL relative to http://localhost:9090/bundles/${bundle.name}/ which tells NodeCG what URL you'd like to serve your directory from (Of course, substitute localhost and 9090 with whatever host and port your NodeCG instance is configured to use). { &quot;name&quot;: &quot;test-bundle&quot;, &quot;nodecg&quot;: { &quot;mount&quot;: [ { &quot;directory&quot;: &quot;custom-dir&quot;, &quot;endpoint&quot;: &quot;my-mount-endpoint&quot; } ] } } The above example will make the contents of nodecg/bundles/test-bundle/custom-dir accessible via http://localhost:9090/bundles/test-bundle/my-mount-endpoint. These endpoints behave similarly to how Express' static method serves static files from folders. For example, if custom-dir contains a file called hello-world.html, that file can be accessed via the URL http://localhost:9090/bundles/test-bundle/my-mount-endpoint/hello-world.html.","keywords":"","version":"Next"},{"title":"Migrating from 1.x to 2.x","type":0,"sectionRef":"#","url":"/docs/migrating/migrating-1.x-to-2.x","content":"","keywords":"","version":"Next"},{"title":"Breaking Changes​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#breaking-changes","content":" All authentication keys will be revoked and replaced with new onesNodeCG no longer commits build outputs to the repositoryRewrote the entire core in TypeScriptRemoved undocumented rawManifest property from bundle objectsUpdated the Sentry SDK and removed publicDsn from the configRewrote the login system, advanced integrations with it may no longer workSocket.IO messages (i.e. sendMessage) now use the broadcast flagTo enable &quot;trace&quot; logging, set the log level to &quot;verbose&quot;Support for JSON5 in config files has been removedSupported Node.js versions are now 16 and 18Minimum supported TypeScript version is now 4.7All config and replicant schemas may now be authored in JSON Schema Draft 04, Draft 07, Draft 2019-09, or Draft 2020-12Fullbleed workspace labels now use the panel title instead of the panel nameFixed Replicant assignment sometimes being applied out-of-orderRemoved support for pkgReplicants now properly parse falsey valuesNodeCG will now only exit with code 0 if there isn't already an exit codeReplicant logging is now configured separately for Console and File outputs  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#features","content":" All configs may now be written in JSON, CommonJS, or YAML.Worker clients are now supported.All config and replicant schemas may now be authored in JSON Schema Draft 04, Draft 07, Draft 2019-09, or Draft 2020-12  ","version":"Next","tagName":"h2"},{"title":"All authentication keys will be revoked and replaced with new ones​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#all-authentication-keys-will-be-revoked-and-replaced-with-new-ones","content":" Since the entire login system has been rewritten, none of the prior authenticaon keys are valid. As such, new ones will be generated for all users, and any ?key=xxx URLs in use will need to be updated.  ","version":"Next","tagName":"h3"},{"title":"NodeCG no longer commits build outputs to the repository​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#nodecg-no-longer-commits-build-outputs-to-the-repository","content":" To help make the repository cleaner, we no longer commit a built version of NodeCG to it. However, pre-built distributions are available from npm and GitHub releases. These pre-builds can be easily installed via nodecg-cli.  ","version":"Next","tagName":"h3"},{"title":"Rewrote the entire core in TypeScript​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#rewrote-the-entire-core-in-typescript","content":" NodeCG has been completely rewritten in TypeScript! We've kept the breaking changes to a minimum and most bundles should need very few code changes, but given the sheer scope of this change it is possible that we haven't accounted for every single breaking change. If you run across a breaking change not mentioned in this document, please open an issue. Please note that this does not mean that all bundles must now be written in TypeScript. Plain JavaScript is and always will be supported.  ","version":"Next","tagName":"h3"},{"title":"Removed undocumented rawManifest property from bundle objects​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#removed-undocumented-rawmanifest-property-from-bundle-objects","content":" Previously, NodeCG had an undocumented rawManifest property exposed on bundle objects. This property contained an unmodified copy of that bundle's package.json, and has been removed.  ","version":"Next","tagName":"h3"},{"title":"Updated the Sentry SDK and removed publicDsn from the config​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#updated-the-sentry-sdk-and-removed-publicdsn-from-the-config","content":" For Sentry users, the SDK has been updated and publicDsn is no longer used. Now, there's just one dsn.  ","version":"Next","tagName":"h3"},{"title":"Rewrote the login system, advanced integrations with it may no longer work​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#rewrote-the-login-system-advanced-integrations-with-it-may-no-longer-work","content":" The login system has been rewritten to be backed by a real database with users and roles, to pave the way for future improvements to security and account handling, with per-user permissions. However, at this time, it still functions mostly the same way it did in 1.x. That said, given the massive changes to this system, any bundles which built additional functionality on top of the login system may break. If your use case is no longer supported, please open an issue.  If your bundle relied on the accessToken and refreshToken properties available from the old login lib, use these alternatives instead:  import type NodeCG from '@nodecg/types'; export = (nodecg: NodeCG.ServerAPI) =&gt; { nodecg.on('login', (user) =&gt; { console.log(user.id, user.name); }); nodecg.on('logout', (user) =&gt; { console.log(user.id, user.name); }); nodecg.mount((req, _res, _next) =&gt; { if (req.user) { const ident = req.user.identities[0]; switch (ident.provider_type) { case 'discord': case 'twitch': console.log(ident.provider_access_token, ident.provider_refresh_token); } } }); };   ","version":"Next","tagName":"h3"},{"title":"Socket.IO messages (i.e. sendMessage) now use the broadcast flag​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#socketio-messages-ie-sendmessage-now-use-the-broadcast-flag","content":" Previously, NodeCG naively did not use Socket.IO's broadcast flag to emit messages to all clients. This caused some issues such as messages sometimes being received by the context that sent them. This bug should be fixed, but it is considered a breaking change because it is possible that some bundles relied on this bug.  ","version":"Next","tagName":"h3"},{"title":"To enable \"trace\" logging, set the log level to \"verbose\"​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#to-enable-trace-logging-set-the-log-level-to-verbose","content":" The logging system has changed slightly, and to view log.trace output, you must now set logging.console.level and/or logging.file.level to verbose in your NodeCG config.  ","version":"Next","tagName":"h3"},{"title":"Support for JSON5 in config files has been removed​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#support-for-json5-in-config-files-has-been-removed","content":" The config loader system has been rewritten and the new library unfortunately no longer supports JSON5. However, it does support YAML and CommonJS, both of which support comments. This means that instead of needing to write cfg/nodecg.json, you could instead write cfg/nodecg.yaml or cfg/nodecg.js (with a module.exports = {} statement). The same goes for bundle configs.  ","version":"Next","tagName":"h3"},{"title":"Supported Node.js versions are now 16 and 18​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#supported-nodejs-versions-are-now-16-and-18","content":" To keep up with the rapid pace of Node.js development, the supported Node.js versions are now 16 and 18, both of which are LTS.  ","version":"Next","tagName":"h3"},{"title":"Minimum supported TypeScript version is now 4.7​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#minimum-supported-typescript-version-is-now-47","content":" If your bundle uses TypeScript, it needs to use version 4.7 or greater to have compatibility with NodeCG v2.x.  ","version":"Next","tagName":"h3"},{"title":"All config and replicant schemas may now be authored in JSON Schema Draft 04, Draft 07, Draft 2019-09, or Draft 2020-12​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#all-config-and-replicant-schemas-may-now-be-authored-in-json-schema-draft-04-draft-07-draft-2019-09-or-draft-2020-12","content":" Previously, only Draft 04 was supported.  ","version":"Next","tagName":"h3"},{"title":"Fullbleed workspace labels now use the panel title instead of the panel name​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#fullbleed-workspace-labels-now-use-the-panel-title-instead-of-the-panel-name","content":" Previously, there was a bug where workspace labels used the wrong data for their user-facing labels.  ","version":"Next","tagName":"h3"},{"title":"Fixed Replicant assignment sometimes being applied out-of-order​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#fixed-replicant-assignment-sometimes-being-applied-out-of-order","content":" There was an obscure bug that could cause assignment operations on Replicants to be applied before preceeding change events. This is no longer the case. It is technically a breaking change, but is is unlikely that many bundles relied on this broken behavior.  ","version":"Next","tagName":"h3"},{"title":"Removed support for pkg​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#removed-support-for-pkg","content":" pkg is a tool for packaging Node.js projects into an executable that NodeCG used to have undocumented support for. This support has been removed. Instead, follow the instructions on the Portable NodeCG page.  ","version":"Next","tagName":"h3"},{"title":"Replicants now properly parse falsey values​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#replicants-now-properly-parse-falsey-values","content":" If you have a Replicant that tries to save values like 0 or undefined, it will now properly do so.  ","version":"Next","tagName":"h3"},{"title":"NodeCG will now only exit with code 0 if there isn't already an exit code​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#nodecg-will-now-only-exit-with-code-0-if-there-isnt-already-an-exit-code","content":" NodeCG used to clobber previously-set exit codes at times. This is no longer the case.  ","version":"Next","tagName":"h3"},{"title":"Replicant logging is now configured separately for Console and File outputs​","type":1,"pageTitle":"Migrating from 1.x to 2.x","url":"/docs/migrating/migrating-1.x-to-2.x#replicant-logging-is-now-configured-separately-for-console-and-file-outputs","content":" Previously, Replicant logging was a direct child of the logging property, and it was one setting that controlled logging Replicant debug into to both Console and File outputs. Now, these two things can be configured separately as logging.console.replicants and/or logging.file.replicants. ","version":"Next","tagName":"h3"},{"title":"Migrating from 0.9 to 1.0","type":0,"sectionRef":"#","url":"/docs/migrating/migrating-0.9-to-1.0","content":"","keywords":"","version":"Next"},{"title":"Breaking Changes​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#breaking-changes","content":" Breaking Changes Undocumented [dialog-confirm] and [dialog-dismiss] attribute click handlers have been removedUndocumented (and broken) panelClick event has been removedUndocumented customCues system has been removedMultiple listenFor handlers for a given messagesendMessage can now trigger listenFor handlers in the same contextTwitch auth now uses the &quot;New Twitch API&quot;, instead of the deprecated &quot;v5&quot; API  ","version":"Next","tagName":"h2"},{"title":"Undocumented [dialog-confirm] and [dialog-dismiss] attribute click handlers have been removed​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#undocumented-dialog-confirm-and-dialog-dismiss-attribute-click-handlers-have-been-removed","content":" Previously, NodeCG had an undocumented feature where any element in a Dialog with a [dialog-confirm] or [dialog-dismiss] attribute would close the panel (with an appropriate confirmed or dismissed event) when clicked.  This undocumented feature has been removed. If your bundle relied on it, you will need to re-implement similar functionality in your bundle's code.  ","version":"Next","tagName":"h3"},{"title":"Undocumented (and broken) panelClick event has been removed​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#undocumented-and-broken-panelclick-event-has-been-removed","content":" Previously, NodeCG had an undocumented feature where any click event on any panel (or dialog) would emit a panelClick event on that panel's document.  This undocumented feature has been removed, and never really worked properly to begin with. If your bundle relied on it, you will need to re-implement similar functionality in your bundle's code.  ","version":"Next","tagName":"h3"},{"title":"Undocumented customCues system has been removed​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#undocumented-customcues-system-has-been-removed","content":" Previously, NodeCG had an undocumented and extremely complex feature for defining and editing Sound Cues during runtime.  This undocumented feature has been removed. If your bundle relied on it, you will need to re-implement similar functionality in your bundle's code.  ","version":"Next","tagName":"h3"},{"title":"Multiple listenFor handlers for a given message​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#multiple-listenfor-handlers-for-a-given-message","content":" Previously, NodeCG only allowed your bundle to specify one listenFor handler, per message, per context.  Now, NodeCG lets you define as many listenFor handlers as you want, for any message, in any location.  However, server-side listenFor handlers must be careful to not call an acknowledgement more than once:  // nodecg/bundles/your-bundle module.exports = function(nodecg) { nodecg.listenFor('example', (data, ack) =&gt; { if (ack &amp;&amp; !ack.handled) { ack('foo'); } }); };   &lt;!-- nodecg/bundles/your-bundle/graphics/example.html --&gt; &lt;script&gt; nodecg.sendMessage('example', 'hello', (error, response) =&gt; { console.log(response); // =&gt; Will log &quot;foo&quot;. }); &lt;/script&gt;   Calling an acknowledgement more than once will throw an error.  In short: most bundles won't need to change any of their code to be compatible with this change, but you should give everything a once-over to make sure things aren't behaving unexpectedly due to this new behavior.  ","version":"Next","tagName":"h3"},{"title":"sendMessage can now trigger listenFor handlers in the same context​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#sendmessage-can-now-trigger-listenfor-handlers-in-the-same-context","content":" Previously, NodeCG messages were inter-context only. That meant that they were only sent out over the network, and were not sent to other listeners in the same process context (extension, graphic, panel, etc).  Now, NodeCG sends messages to every listener, regardless of location. This means that code like the following will now work as expected:  // nodecg/bundles/your-bundle/extension.js module.exports = function(nodecg) { nodecg.sendMessage('hello', 'Hi there!'); };   // nodecg/bundles/my-bundle/extension.js module.exports = function(nodecg) { nodecg.listenFor('hello', 'your-bundle', data =&gt; { console.log(data); // =&gt; Will print &quot;Hi there!&quot; }); };   A side-effect of this change is that it is no longer guaranteed that a server-side listenFor handler will receive an acknowledgement callback as its second argument. You should always check for the presence of an acknowledgement before attempting to call it:  // nodecg/bundles/your-bundle module.exports = function(nodecg) { nodecg.listenFor('example', (data, ack) =&gt; { if (ack &amp;&amp; !ack.handled) { ack('foo'); } }); };   ","version":"Next","tagName":"h3"},{"title":"Twitch auth now uses the \"New Twitch API\", instead of the deprecated \"v5\" API​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#twitch-auth-now-uses-the-new-twitch-api-instead-of-the-deprecated-v5-api","content":" Previously, NodeCG used the deprecated &quot;v5&quot; Twitch API.  Now, NodeCG uses the &quot;New Twitch API&quot;. The only tangible result of this change for NodeCG is that the format of the login.twitch.scope config parameter has changed. Please see https://dev.twitch.tv/docs/authentication/#scopes for documentation on this new format. ","version":"Next","tagName":"h3"},{"title":"Portable NodeCG","type":0,"sectionRef":"#","url":"/docs/portable-nodecg","content":"Portable NodeCG By bundling the main Node.js executable (node.exe) with a NodeCG instance, NodeCG can run from any folder without requiring an installation process. To start, your NodeCG instance must be fully installed and configured. This means that all dependencies for both NodeCG and all bundles should be installed. Run the instance once and make sure everything works before continuing. Once you have verified that the instance works and that all dependencies are installed, copy node.exe from your Node.js installation into the root of your NodeCG instance. In the same directory, create a batch file or shell script with the following content: node index.js Double-click that batch file/shell script to run NodeCG. With the above procedure, it is possibly to fully configure a NodeCG instance and put it on a USB stick that can be run on any PC. This is good for preparing for broadcasts ahead of time where the broadcast PC might not have Node.js, git, and a compiler chain installed.","keywords":"","version":"Next"},{"title":"Running NodeCG","type":0,"sectionRef":"#","url":"/docs/running-nodecg","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"Running NodeCG","url":"/docs/running-nodecg#usage","content":" Install a bundle to the bundles folder.Start NodeCG (node index.js or nodecg start if you have installed nodecg globally).Open the dashboard (http://localhost:9090 by default).Open a graphic from the &quot;Graphics&quot; menu.You can configure NodeCG by creating and editing cfg/nodecg.json.  When running NodeCG in production, Docker or pm2 are recommended.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Running NodeCG","url":"/docs/running-nodecg#configuration","content":" ./cfg/nodecg.json is an optional file that you can create to configure NodeCG. See the NodeCG Configuration tutorial for more information on configuring NodeCG. ","version":"Next","tagName":"h3"},{"title":"Screenshot Testing Graphics","type":0,"sectionRef":"#","url":"/docs/screenshot-testing","content":"Screenshot Testing Graphics Screenshot testing can be accomplished through the use of the nodecg-screenshot-tester library. See its documentation for more details on how to get started.","keywords":"","version":"Next"},{"title":"Replicant Validation","type":0,"sectionRef":"#","url":"/docs/replicant-schemas","content":"","keywords":"","version":"Next"},{"title":"Example​","type":1,"pageTitle":"Replicant Validation","url":"/docs/replicant-schemas#example","content":" nodecg/bundles/my-bundle/schemas/foo.json  { &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;, &quot;type&quot;: &quot;object&quot;, &quot;additionalProperties&quot;: false, &quot;properties&quot;: { &quot;bar&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The value of bar, which is a String.&quot;, &quot;default&quot;: &quot;hello world&quot; }, &quot;baz&quot;: { &quot;type&quot;: &quot;number&quot;, &quot;description&quot;: &quot;The value of baz, which is a Number.&quot;, &quot;default&quot;: 0 } }, &quot;required&quot;: [&quot;bar&quot;, &quot;baz&quot;] }   nodecg/bundles/my-bundle/extension.js  module.exports = function(nodecg) { // We don't need to specify a `defaultValue` here, it will be automatically generated from the defaults // in the schema. const foo = nodecg.Replicant('foo'); /* You can override this by specifying your own `defaultValue` when declaring the Replicant. const foo = nodecg.Replicant('foo', { defaultValue: { bar: &quot;hi&quot;, baz: 5 } }); */ console.log(foo.value.bar); //=&gt; &quot;hello world&quot; console.log(foo.value.baz); //=&gt; 0 foo.value.bar = &quot;greetings planet&quot;; // Valid change, no error will be thrown. foo.value.baz = &quot;this should be a number!&quot;; // Invalid change, an error will be thrown. };  ","version":"Next","tagName":"h2"},{"title":"NodeCG Configuration","type":0,"sectionRef":"#","url":"/docs/nodecg-configuration","content":"","keywords":"","version":"Next"},{"title":"Schema​","type":1,"pageTitle":"NodeCG Configuration","url":"/docs/nodecg-configuration#schema","content":" host String The IP address or hostname that NodeCG should bind to. [DEFAULT: &quot;0.0.0.0&quot;]port Integer The port that NodeCG should listen on. [DEFAULT: 9090]baseURL String The URL of this instance. Used for things like cookies. If you use a reverse proxy, you'll likely need to set this value. [DEFAULT: HOST:PORT]exitOnUncaught Boolean Whether or not to exit on uncaught exceptions. [DEFAULT: true]logging Object Contains other configuration properties. console Object Contains properties for console logging. enabled Boolean Whether to enable console logging. [DEFAULT: true]level String Lowest importance of messages which should be logged. Must be &quot;verbose&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot; or &quot;error&quot; [DEFAULT: &quot;info&quot;]timestamps Boolean Whether to add timestamps to the console logging. [DEFAULT: true]replicants Boolean Whether to enable logging of the Replicants subsystem. Very spammy. [DEFAULT: false] replicants Boolean Whether to enable logging of the Replicants subsystem. Very spammy. [DEFAULT: false] timestamps Boolean Whether to add timestamps to the console logging. [DEFAULT: true]level String Lowest importance of messages which should be logged. Must be &quot;verbose&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot; or &quot;error&quot; [DEFAULT: &quot;info&quot;] file Object Contains properties for file logging. enabled Boolean Whether to enable file logging. [DEFAULT: false]replicants Boolean Whether to enable logging of the Replicants subsystem. Very spammy. [DEFAULT: false]timestamps Boolean Whether to add timestamps to the file logging. [DEFAULT: true]level String Lowest importance of messages which should be logged. Must be &quot;verbose&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot; or &quot;error&quot; [DEFAULT: &quot;info&quot;]path String The filepath to log to. [DEFAULT: &quot;logs/nodecg.log&quot;] bundles Object Contains configuration for bundles. enabled Array of strings A whitelist array of bundle names that will be the only ones loaded at startup. Cannot be used with bundles.disabled. [DEFAULT: null -&gt; this bundle whitelist feature is disabled -&gt; load all bundles]disabled Array of strings A blacklist array of bundle names that will not be loaded at startup. Cannot be used with bundles.enabled. [DEFAULT: null -&gt; no bundle blacklisted from loading / all bundles are loaded]paths Array of strings An array of additional ABSOLUTE paths where bundles are located. [DEFAULT: [] (empty array)] login Object Contains other configuration properties. enabled Boolean Whether to enable login security. [DEFAULT: false]sessionSecret String The secret used to salt sessions. This option is required when login.enabled = true! [NO DEFAULT!]forceHttpsReturn Boolean Forces Steam &amp; Twitch login return URLs to use HTTPS instead of HTTP. Useful in reverse proxy setups. [DEFAULT: false]local Object Contains local username &amp; password login configuration properties. enabled Boolean Whether to enable Local authentication. [DEFAULT: false]allowedUsers Array of objects Which usernames and passwords to allow. Example: {&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;foo123&quot;}. This option is required when login.local.enabled = true! [NO DEFAULT!] steam Object Contains steam login configuration properties. enabled Boolean Whether to enable Steam authentication. [DEFAULT: false]apiKey String A Steam API Key. Obtained from http://steamcommunity.com/dev/apikey. This option is required when login.steam.enabled = true! [NO DEFAULT!]allowedIds Array of strings Which 64 bit Steam IDs to allow. Can be obtained from https://steamid.io/. This option is required when login.steam.enabled = true! [NO DEFAULT!] twitch Object Contains twitch login configuration properties. enabled Boolean Whether to enable Twitch authentication. [DEFAULT: false]clientID String A Twitch application ClientID http://twitch.tv/kraken/oauth2/clients/new. This option is required when login.twitch.enabled = true! [NO DEFAULT!]clientSecret String A Twitch application ClientSecret http://twitch.tv/kraken/oauth2/clients/new. This option is required when login.twitch.enabled = true! [NO DEFAULT!]Note: Configure your Twitch OAuth credentials with a Redirect URI to {baseURL}/login/auth/twitchscope String A space-separated string of Twitch application permissions. [DEFAULT: &quot;user_read&quot;]allowedUsernames Array of strings Which Twitch usernames to allow. Either this option or allowedIds is required when login.twitch.enabled = true! [NO DEFAULT!]allowedIds Array of strings Which Twitch IDs to allow. Can be obtained from https://twitchinsights.net/checkuser. Either this option or allowedUsernames is required when login.twitch.enabled = true! [NO DEFAULT!] discord Object Contains discord login configuration properties. enabled Boolean Whether to enable Discord authentication. [DEFAULT: false]clientID String A Discord application ClientID https://discord.com/developers/applications/. This option is required when login.discord.enabled = true! [NO DEFAULT!]clientSecret String A Discord application ClientSecret https://discord.com/developers/applications/Note: Configure your Discord OAuth credentials with a Redirect URI to {baseURL}/login/auth/discord. This option is required when login.discord.enabled = true! [NO DEFAULT!]scope String A space-separated string of Discord application permissions. [DEFAULT: &quot;identify&quot;]allowedUserIDs Array of strings Which Discord IDs to allow. Either this option or allowedGuilds is required when login.discord.enabled = true! [NO DEFAULT!]allowedGuilds Array of objects Which servers to allow users from. Either this option or allowedUserIDs is required when login.discord.enabled = true! [NO DEFAULT!]Format for allowedGuilds objects guildID String Users in this Discord Server are allowed to log inallowedRoleIDs Array of strings Additionally require one of the roles on the server to log inguildBotToken String Discord bot token, needed if allowedRoleIDs is used https://discord.com/developers/applications/ ssl Object Contains HTTPS/SSL configuration properties. enabled Boolean Whether to enable SSL/HTTPS encryption. [DEFAULT: false]allowHTTP Boolean Whether to allow insecure HTTP connections while SSL is active. [DEFAULT: false]keyPath String The path to an SSL key file. This option is required when ssl.enabled = true! [NO DEFAULT!]certificatePath String The path to an SSL certificate file. This option is required when ssl.enabled = true! [NO DEFAULT!]passphrase String The passphrase for the provided key file. [OPTIONAL] sentry Object Contains Sentry configuration properties. enabled Boolean Whether to enable Sentry error reporting. [DEFAULT: false]dsn String Your Sentry API key for error reporting. This option is required when sentry.enabled = true! [NO DEFAULT!]  ","version":"Next","tagName":"h3"},{"title":"Example Config​","type":1,"pageTitle":"NodeCG Configuration","url":"/docs/nodecg-configuration#example","content":" cfg/nodecg.js module.exports = { host: '0.0.0.0', port: 9090, bundles: { enabled: ['bundle-name'], paths: ['C:\\\\nodecg\\\\experimental-bundles'], }, login: { enabled: true, sessionSecret: 'supersecret', steam: { enabled: true, apiKey: 'YYYYY', allowedIds: ['11111111111111111', '22222222222222222'], }, twitch: { enabled: true, clientID: 'your_app_id', clientSecret: 'your_app_key', scope: 'user_read', allowedUsernames: ['some_username'], allowedIds: ['11111111111111111', '22222222222222222'], }, discord: { enabled: true, clientID: 'your_discord_app_client_id', clientSecret: 'your_discord_app_client_secret', scope: 'identify guilds', allowedUserIDs: ['159600065017675778', '54561421005950976'], allowedGuilds: [ { guildID: '754749209722486814', allowedRoleIDs: ['754751725457637546', '755012946400378910'], guildBotToken: 'your_bot_token', }, { guildID: '754749209722486814', }, ], }, }, logging: { console: { enabled: true, timestamps: false, level: 'verbose', replicants: false, }, file: { enabled: true, timestamps: true, path: 'logs/server.log', level: 'info', replicants: false, }, }, ssl: { enabled: false, keyPath: '', certificatePath: '', }, sentry: { enabled: true, dsn: 'https://xxx:yyy@sentry.io/zzz', }, };  ","version":"Next","tagName":"h3"},{"title":"Error Reporting with Sentry.io","type":0,"sectionRef":"#","url":"/docs/sentry","content":"Error Reporting with Sentry.io NodeCG v0.9 adds support for Sentry.io, a service for tracking errors. Sentry is especially useful for developers whom manage multiple NodeCG instances and need to be informed of both server-side and client-side errors as they happen. To add Sentry to your NodeCG instance, you'll first need to create a Sentry account and a Sentry project. Then, add the following to your instance's NodeCG config: { &quot;sentry&quot;: { &quot;enabled&quot;: true, &quot;dsn&quot;: &quot;your project's DSN, used as an API key to report errors&quot; } } Once Sentry is configured, any uncaught exceptions or unhandled promise rejections either on the server or on the client will be reported automatically. In addition, any use of nodecg.log.error will also be reported to Sentry.","keywords":"","version":"Next"},{"title":"Sounds","type":0,"sectionRef":"#","url":"/docs/sounds","content":"Sounds NodeCG features a system for management and playback of sound cues. To add sound cues to your bundle, create a nodecg.soundCues array in your package.json: { &quot;name&quot;: &quot;test-bundle&quot;, &quot;nodecg&quot;: { &quot;soundCues&quot;: [ { &quot;name&quot;: &quot;name-only&quot; }, { &quot;name&quot;: &quot;default-volume&quot;, &quot;defaultVolume&quot;: 80 }, { &quot;name&quot;: &quot;non-assignable&quot;, &quot;assignable&quot;: false, &quot;defaultFile&quot;: &quot;sound/default-file.ogg&quot; }, { &quot;name&quot;: &quot;default-file&quot;, &quot;defaultFile&quot;: &quot;sound/default-file.ogg&quot; }, { &quot;name&quot;: &quot;single-channel&quot;, &quot;channels&quot;: 1 } ] } } Your bundle will now have a card on the Mixer page of the Dashboard. defaultFiles are audio files that you ship with your bundle. They will be available to that specific cue as a &quot;Default&quot; option in that cue's dropdown select on the Mixer. channels determines how many instances of a sound can be playing simultaneously. The default value is 100. If set to 1, only one instance can play at a time, and a new instance cannot be started until the currently playing instance has completed. If your bundle has at least one cue that is assignable, it will gain a &quot;Sounds&quot; Asset category. This category accepts .ogg and .mp3 files. Any audio files uploaded to this category will become available as options in all of your assignable cues' dropdown boxes. If your bundle has Sound Cues, the following API methods will be available to your graphic: playSoundstopSoundstopAllSounds","keywords":"","version":"Next"},{"title":"Using npm Dependencies","type":0,"sectionRef":"#","url":"/docs/using-npm","content":"Using npm Dependencies warning As of NodeCG v0.9, per-bundle bower and npm dependencies are no longer automatically installed. It is up to the user to run whatever installation commands are necessary in each bundle. Install npm dependencies as you would in any other Node.js project. Extensions can then access these dependencies directly, via normal require statements: bundles/my-bundle/package.json { &quot;name&quot;: &quot;my-bundle&quot;, ... &quot;dependencies&quot;: { &quot;some-dep&quot;: &quot;^1.0.0&quot; } } bundles/my-bundle/extension.js const someDep = require('some-dep'); module.exports = function(nodecg) { // I can use someDep whenever I want! }; ","keywords":"","version":"Next"},{"title":"What is NodeCG?","type":0,"sectionRef":"#","url":"/docs/what-is-nodecg","content":"","keywords":"","version":"Next"},{"title":"Goals​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#goals","content":" The NodeCG project exists to accomplish the following goals:  Make broadcast graphics (also known as &quot;character generation&quot; or &quot;CG&quot;) more accessible.Remain as close to the web platform as possible.Support broadcasts of any size and ambition.  ","version":"Next","tagName":"h2"},{"title":"Make broadcast graphics more accessible​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#goal-accessible","content":" Historically, broadcast graphics have been expensive. They either required expensive hardware, expensive software, or both. NodeCG was originally created to provide real-time broadcast graphics for Tip of the Hats, which is an all-volunteer charity fundraiser that had a budget of $0 for its first several years.  Now, it is possible to create an ambitious broadcast using entirely free software and consumer hardware. The NodeCG project embraces this democratization of broadcast technology.  ","version":"Next","tagName":"h3"},{"title":"Remain as close to the web platform as possible​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#goal-web","content":" NodeCG graphics are just webpages. There is absolutely nothing special or unique about them. This is their greatest strength.  By building on the web platform, and not building too many abstractions on top of it, people developing broadcast graphics with NodeCG have access to the raw potential of the web. New APIs and capabilities are continually being added to the web platform, and NodeCG developers should have access to the entirety of what the web can offer.  ","version":"Next","tagName":"h3"},{"title":"Support broadcasts of any size and ambition​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#goal-size","content":" NodeCG's roots are in small broadcasts with no budget. More recently, NodeCG has begun seeing use in increasingly elaborate productions. We believe that one set of tools can and should be able to scale up from the smallest show all the way to the biggest fathomable show. Whether you're using OBS for everything, or a hardware switcher with a traditional key/fill workflow, NodeCG can be a part of any broadcast graphics system.  ","version":"Next","tagName":"h3"},{"title":"Maintainers​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#maintainers","content":" Alex &quot;Lange&quot; Van CampMatt &quot;Bluee&quot; McNamaraKeiichiro &quot;Hoishin&quot; Amemiya  ","version":"Next","tagName":"h2"},{"title":"Designers​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#designers","content":" Chris Hanel  ","version":"Next","tagName":"h2"},{"title":"Acknowledgements​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#acknowledgement","content":" Atmo, original dashboard concept and code, the inspiration for toth-overlayAlex &quot;Lange&quot; Van Camp, designer &amp; developer of toth-overlay, the base on which NodeCG was built ","version":"Next","tagName":"h2"},{"title":"Working on NodeCG Core","type":0,"sectionRef":"#","url":"/docs/working-on-nodecg-core","content":"Working on NodeCG Core NodeCG is an open-source project written by a core group of maintainers and a community of contributors. If you'd like to contribute to NodeCG itself, here's how to get started: Install Node.js (18). Clone NodeCG: git clone https://github.com/nodecg/nodecg.git Open NodeCG in your editor of choice. Most of the devteam uses VS Code. Install NodeCG's dependencies: npm install Run NodeCG's development script, which automatically recompiles the client and server code whenever the source files on disk change. It also automatically restarts the server. It does not automatically refresh open browser pages. npm run dev Make your changes. If applicable, add tests for your changes by editing the appropriate file(s) in the test directory. Run the test suite: # Be sure that you have re-built NodeCG before running the tests! # If you're not sure, run `npm run build` before `npm test`. npm test Once tests pass, push your changes and open a pull request!","keywords":"","version":"Next"},{"title":"Security & Authentication","type":0,"sectionRef":"#","url":"/docs/security","content":"","keywords":"","version":"Next"},{"title":"Is NodeCG secure by default?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#security","content":" No. By default, NodeCG has no authorization or authentication of any kind. To enable basic authentication, see the How do I enable login security? section.  Do not put an unsecured NodeCG instance on the internet or a public network. Unsecured instances should only be used for local development and on trusted LANs.  ","version":"Next","tagName":"h2"},{"title":"What levels of authorization does NodeCG have?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#authorization","content":" NodeCG has a fairly naive permissions model. There are only two permission levels:  Completely unauthorized, with no access to anythingCompletely authorized, with full access to everything  This is something we want to improve in the future, but right now this is how things are in NodeCG.  &quot;Full access to everything&quot; includes:  Read/write access to every Replicant in every bundle Read/write access to every message in every bundle Read access to the full config of every bundle Your bundle configs may include sensitive API keys and passwords. Every user of your NodeCG deployment will have full access to these config values.  Therefore, untrusted users must never be given any degree of authorization in your NodeCG instance. They must never be allowed to successfully authenticate with the socket server. If they do, they will have full control over your entire NodeCG instance.  ","version":"Next","tagName":"h2"},{"title":"How are users authorized?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#authorization-method","content":" NodeCG has two ways of authorizing a user:  Reading the value of their socketToken cookie.Reading the value of their key URL query parameter. This is why the &quot;COPY URL&quot; buttons on the &quot;Graphics&quot; tab of the dashboard include a ?key=YOUR_KEY at the end of them. It is necessary for the pages to load successfully in OBS.  Anyone who gets sent a link which includes a key will have full authorization and access to your NodeCG instance. Treat these links with the same secrecy as you would a password, because that's essentially what they are.  ","version":"Next","tagName":"h2"},{"title":"What do I do if one of my keys got leaked?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#leak","content":" Have the owner of the leaked key navigate to the &quot;Settings&quot; tab on the Dashboard.Click &quot;RESET KEY&quot;, and accept the confirmation dialog.  If you are unable to reach the owner of the leaked key:  Shut down your NodeCG instance.Locate the nodecg/db/nodecg.sqlite3 file.Open this file using any tool that can open an edit SQLite3 databases, such as DB Browser.Open the api_key table and delete the row which contains the leaked key.Restart your NodeCG instance.  In an emergency, you may want to completely delete your database file. The consequences of doing this are that all users will need to log in again and all persisted Replicant values will be lost.  ","version":"Next","tagName":"h2"},{"title":"How do I enable login security?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#enable","content":" NodeCG has support for four authentication providers:  Local Username/Password AuthTwitch AuthDiscord AuthSteam Auth  You may have multiple authentication providers enabled simultaneously.  ","version":"Next","tagName":"h2"},{"title":"Local Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#local-auth","content":" Configure your nodecg/cfg/nodecg.json as such:  { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;local&quot;: { &quot;enabled&quot;: true, &quot;allowedUsers&quot;: [ { &quot;username&quot;: &quot;example1&quot;, &quot;password&quot;: &quot;password_example&quot; }, { &quot;username&quot;: &quot;example2&quot;, &quot;password&quot;: &quot;anotherExample-password1234&quot; } ] } } }   Local authentication also support password hashing by using HMAC. In order to use a password hash, fill the password property with the format &lt;type&gt;:&lt;hash&gt; where &lt;type&gt; is the type (SHA-256, RIPEMD, Whirlpool, ...) and &lt;hash&gt; a valid password hash.  For generating a valid password hash, you must use sessionSecret as secret key. If you're looking for a HMAC hash generator, you can use tools like wtools.io for example.  Currently, only native Node.js algorithms are supported.  Example:  { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;local&quot;: { &quot;enabled&quot;: true, &quot;allowedUsers&quot;: [ { &quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;sha256:ac679e332d4eee340b74eb0581225686f2736d58df7ea30c87a0d2cd5bfd1329&quot; }, { &quot;username&quot;: &quot;other_admin&quot;, &quot;password&quot;: &quot;ripemd:6f00f0c4c18fb563921b689876e98b61&quot; } ] } } }   ","version":"Next","tagName":"h3"},{"title":"Twitch Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#twitch-auth","content":" Create a new application on your Twitch Developer DashboardGive it whatever values you want for Name, Category, and Other DetailsSet the OAuth Redirect URL to https://YOUR_DEPLOYMENT_URL/login/auth/twitch. If you're testing locally, use http://localhost:9090/login/auth/twitch Save your Client ID for the next stepClick &quot;New Secret&quot;, and save your client secret for the next stepConfigure your nodecg/cfg/nodecg.json as such: See the Twitch Dev docs for the list of available scopes.  { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;twitch&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;YOUR_TWITCH_APP_CLIENT_ID&quot;, &quot;clientSecret&quot;: &quot;YOUR_TWITCH_APP_CLIENT_SECRET&quot;, &quot;scope&quot;: &quot;user:read:email&quot;, &quot;allowedUsernames&quot;: [ &quot;your_twitch_username&quot;, &quot;other_twitch_username&quot;, &quot;can_have_as_many_as_you_want&quot; ], &quot;allowedIds&quot;: [ &quot;your_twitch_id&quot;, &quot;other_twitch_id&quot;, &quot;can_have_as_many_as_you_want&quot; ] } } }   ","version":"Next","tagName":"h3"},{"title":"Discord Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#discord-auth","content":" You can use two different kinds of authentication, by user or by server. You can use one of them or both (in which case matching one of them will grant access).  By user​  Create a new application on your Discord Developer Dashboard Give it whatever value you want for the Name Click on OAuth2 on the left and Set the OAuth Redirect URL to https://YOUR_DEPLOYMENT_URL/login/auth/discord. If you're testing locally, use http://localhost:9090/login/auth/discord Use the Client ID and Client Secret from general information for your configuration Configure your nodecg/cfg/nodecg.json like below See the Discord docs for the list of available scopes.  To get a Discord user ID, enable Discord developer mode and then right click on a user to copy it.  { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;discord&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;YOUR_DISCORD_APP_CLIENT_ID&quot;, &quot;clientSecret&quot;: &quot;YOUR_DISCORD_APP_CLIENT_SECRET&quot;, &quot;scope&quot;: &quot;identify&quot;, &quot;allowedUserIDs&quot;: [ &quot;paste discord user ids you want to allow here&quot;, &quot;they look like this&quot;, &quot;159600065017675778&quot;, &quot;54561421005950976&quot; ] } } }   By Server (Guild)​  Create a new application on your Discord Developer Dashboard Give it whatever value you want for the Name Use the Client ID and Client Secret from general information for your configuration Click on OAuth2 on the left and Set the OAuth Redirect URL to https://YOUR_DEPLOYMENT_URL/login/auth/discord. If you're testing locally, use http://localhost:9090/login/auth/discord Configure your nodecg/cfg/nodecg.json like below See the Discord docs for the list of available scopes.  Any user in the server will be allowed to use nodecg.  If you want to check for roles and not just server membership, you also need to do the following: 5. Click on Bot on the left, add a bot, then use the token for your configuration 6. Go to https://discord.com/oauth2/authorize?client_id={YOUR_CLIENT_ID_HERE}&amp;scope=bot&amp;permissions=0 (insert your Client ID) and invite the Bot to servers that you want to use for authentication (the bot will always display as offline, this is normal)  To get a Discord server ID, enable Discord developer mode and then right click on a server to copy it. To get a Discord role ID, enable Discord developer mode and then right click on a role to copy it.  { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;discord&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;YOUR_DISCORD_APP_CLIENT_ID&quot;, &quot;clientSecret&quot;: &quot;YOUR_DISCORD_APP_CLIENT_SECRET&quot;, &quot;scope&quot;: &quot;identify guilds&quot;, &quot;allowedGuilds&quot;: [ // Use this to allow all members to log in { &quot;guildID&quot;: &quot;paste a server id here to allow all members to log in&quot; }, // Use this to restrict log in for certain roles { &quot;guildID&quot;: &quot;paste a server id here to allow members with one of the roles to log in&quot;, &quot;allowedRoleIDs&quot;: [ &quot;paste role ids you want to allow here&quot;, &quot;754751725457637546&quot;, &quot;755012946400378910&quot; ], &quot;guildBotToken&quot;: &quot;paste your Discord BOT token here&quot; } ] } } }   ","version":"Next","tagName":"h3"},{"title":"Steam Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#steam-auth","content":" Create/copy your Steam Web API KeyObtain the SteamID64 string for each of the accounts you wish to allow. steamid.io is one tool for looking these up. Configure your nodecg/cfg/nodecg.json as such:  { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;steam&quot;: { &quot;enabled&quot;: true, &quot;apiKey&quot;: &quot;YOUR_STEAM_WEB_API_KEY&quot;, &quot;allowedIds&quot;: [ &quot;paste the SteamId64s you want to allow here&quot;, &quot;they look like this&quot;, &quot;76561197974943998&quot; ] } } }   ","version":"Next","tagName":"h3"},{"title":"How do I enable HTTPS/SSL encryption?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#ssl","content":" Create an SSL certificate if you don't already have one. Creating an SSL cert is out of the scope of this tutorial. You may need to do some Googling if you are unfamiliar with this process. Configure your nodecg/cfg/nodecg.json as such (passphrase is only required if you created your key with one): Restart NodeCG, and confirm that your instance is accessible via HTTPS.  { &quot;ssl&quot;: { &quot;enabled&quot;: true, &quot;keyPath&quot;: &quot;C:\\\\example\\\\path\\\\your-cert-key.key&quot;, &quot;certificatePath&quot;: &quot;C:\\\\example\\\\path\\\\your-cert.crt&quot;, &quot;passphrase&quot;: &quot;this is my example passphrase&quot; } }  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}